/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AidchainContracts","structs":{"CampaignInfo":[{"name":"id","type":"uint64"},{"name":"title","type":"string"},{"name":"target","type":"uint64"},{"name":"raised","type":"uint64"},{"name":"creator","type":"string"},{"name":"active","type":"uint64"}],"DeliveryRecord":[{"name":"id","type":"uint64"},{"name":"recipient","type":"string"},{"name":"location","type":"string"},{"name":"agent","type":"string"},{"name":"verified","type":"uint64"}],"MilestoneInfo":[{"name":"id","type":"uint64"},{"name":"campaignId","type":"uint64"},{"name":"targetAmount","type":"uint64"},{"name":"description","type":"string"},{"name":"completed","type":"uint64"},{"name":"fundsReleased","type":"uint64"}],"OrganizationInfo":[{"name":"id","type":"uint64"},{"name":"name","type":"string"},{"name":"walletAddress","type":"string"},{"name":"verificationLevel","type":"uint64"}],"VoucherInfo":[{"name":"id","type":"uint64"},{"name":"assetId","type":"uint64"},{"name":"name","type":"string"},{"name":"totalSupply","type":"uint64"},{"name":"issued","type":"uint64"}]},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"initialize","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the contract with default values","events":[],"recommendations":{}},{"name":"register_organization","args":[{"type":"string","name":"org_name"},{"type":"string","name":"wallet_address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Register a new organization in the system with proper data storage","events":[],"recommendations":{}},{"name":"create_campaign","args":[{"type":"string","name":"title"},{"type":"uint64","name":"target"},{"type":"string","name":"creator"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new donation campaign with proper data storage","events":[],"recommendations":{}},{"name":"get_campaign_count","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total number of campaigns created","events":[],"recommendations":{}},{"name":"get_organization_count","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total number of organizations registered","events":[],"recommendations":{}},{"name":"create_donation","args":[{"type":"uint64","name":"campaign_id"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a donation record (for testing without payment)","events":[],"recommendations":{}},{"name":"get_total_donations","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total amount of donations across all campaigns","events":[],"recommendations":{}},{"name":"calculate_total","args":[{"type":"uint64","name":"amount1"},{"type":"uint64","name":"amount2"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate total of two amounts","events":[],"recommendations":{}},{"name":"validate_donation","args":[{"type":"uint64","name":"amount"},{"type":"string","name":"donor"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Validate donation parameters","events":[],"recommendations":{}},{"name":"log_delivery","args":[{"type":"string","name":"recipient"},{"type":"string","name":"location"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Log a delivery event","events":[],"recommendations":{}},{"name":"verify_delivery","args":[{"type":"uint64","name":"delivery_id"},{"type":"string","name":"agent"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Verify a delivery by an authorized agent","events":[],"recommendations":{}},{"name":"get_contract_stats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get overall contract statistics","events":[],"recommendations":{}},{"name":"create_voucher_asset","args":[{"type":"string","name":"asset_name"},{"type":"uint64","name":"total_supply"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a REAL ASA token on the blockchain for aid distribution","events":[],"recommendations":{}},{"name":"distribute_vouchers","args":[{"type":"uint64","name":"asset_id"},{"type":"string","name":"recipient"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"REAL blockchain token transfer to recipient","events":[],"recommendations":{}},{"name":"redeem_voucher","args":[{"type":"uint64","name":"voucher_id"},{"type":"string","name":"merchant"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Redeem voucher tokens at an approved merchant","events":[],"recommendations":{}},{"name":"get_voucher_stats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get voucher system statistics","events":[],"recommendations":{}},{"name":"create_milestone","args":[{"type":"uint64","name":"campaign_id"},{"type":"uint64","name":"target_amount"},{"type":"string","name":"description"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new milestone for campaign funding","events":[],"recommendations":{}},{"name":"complete_milestone","args":[{"type":"uint64","name":"milestone_id"},{"type":"string","name":"proof"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mark milestone as completed with proof","events":[],"recommendations":{}},{"name":"release_milestone_funds","args":[{"type":"uint64","name":"milestone_id"},{"type":"account","name":"recipient"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Release REAL funds for completed milestone via blockchain payment","events":[],"recommendations":{}},{"name":"get_milestone_stats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get milestone system statistics","events":[],"recommendations":{}},{"name":"get_campaign_details","args":[{"type":"uint64","name":"campaign_id"}],"returns":{"type":"(uint64,string,uint64,uint64,string,uint64)","struct":"CampaignInfo"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get detailed information about a campaign","events":[],"recommendations":{}},{"name":"get_organization_details","args":[{"type":"uint64","name":"org_id"}],"returns":{"type":"(uint64,string,string,uint64)","struct":"OrganizationInfo"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get detailed information about an organization","events":[],"recommendations":{}},{"name":"get_voucher_details","args":[{"type":"uint64","name":"voucher_id"}],"returns":{"type":"(uint64,uint64,string,uint64,uint64)","struct":"VoucherInfo"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get detailed information about a voucher","events":[],"recommendations":{}},{"name":"get_milestone_details","args":[{"type":"uint64","name":"milestone_id"}],"returns":{"type":"(uint64,uint64,uint64,string,uint64,uint64)","struct":"MilestoneInfo"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get detailed information about a milestone","events":[],"recommendations":{}},{"name":"get_delivery_details","args":[{"type":"uint64","name":"delivery_id"}],"returns":{"type":"(uint64,string,string,string,uint64)","struct":"DeliveryRecord"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get detailed information about a delivery","events":[],"recommendations":{}},{"name":"get_milestone_count","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get total number of milestones created","events":[],"recommendations":{}},{"name":"get_voucher_count","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get total number of vouchers created","events":[],"recommendations":{}},{"name":"get_delivery_count","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get total number of deliveries logged","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":9,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"campaign_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2FtcGFpZ25fY291bnRlcg=="},"organization_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3JnYW5pemF0aW9uX2NvdW50ZXI="},"delivery_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGVsaXZlcnlfY291bnRlcg=="},"voucher_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"dm91Y2hlcl9jb3VudGVy"},"milestone_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWlsZXN0b25lX2NvdW50ZXI="},"total_donations":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfZG9uYXRpb25z"},"total_organizations":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfb3JnYW5pemF0aW9ucw=="},"total_vouchers_issued":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfdm91Y2hlcnNfaXNzdWVk"},"total_milestones_completed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfbWlsZXN0b25lc19jb21wbGV0ZWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"campaigns":{"keyType":"uint64","valueType":"CampaignInfo","prefix":"Y2FtcGFpZ25z"},"organizations":{"keyType":"uint64","valueType":"OrganizationInfo","prefix":"b3Jncw=="},"milestones":{"keyType":"uint64","valueType":"MilestoneInfo","prefix":"bWlsZXN0b25lcw=="},"deliveries":{"keyType":"uint64","valueType":"DeliveryRecord","prefix":"ZGVsaXZlcmllcw=="},"vouchers":{"keyType":"uint64","valueType":"VoucherInfo","prefix":"dm91Y2hlcnM="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[2335],"errorMessage":"Amount must be greater than zero"},{"pc":[1614,2162],"errorMessage":"Campaign ID cannot be zero"},{"pc":[1611,2159],"errorMessage":"Campaign ID out of range"},{"pc":[1625,2174,2410],"errorMessage":"Campaign not found"},{"pc":[1852],"errorMessage":"Delivery ID cannot be zero"},{"pc":[1849],"errorMessage":"Delivery ID out of range"},{"pc":[1864,2474],"errorMessage":"Delivery not found"},{"pc":[2245,2332],"errorMessage":"Milestone ID cannot be zero"},{"pc":[2242,2329],"errorMessage":"Milestone ID out of range"},{"pc":[2257,2458],"errorMessage":"Milestone not found"},{"pc":[508,525,542,559,578,597,616,635,654,702,740,774,805,851,889,939,965,1012,1046,1075,1109,1134,1151,1179,1196,1213,1246,1275,1299],"errorMessage":"OnCompletion is not NoOp"},{"pc":[2426],"errorMessage":"Organization not found"},{"pc":[2442],"errorMessage":"Voucher not found"},{"pc":[1334],"errorMessage":"can only call when creating"},{"pc":[511,528,545,562,581,600,619,638,657,705,743,777,808,854,892,942,968,1015,1049,1078,1112,1137,1154,1182,1199,1216,1249,1278,1302],"errorMessage":"can only call when not creating"},{"pc":[1513,1593,1607,2155],"errorMessage":"check self.campaign_counter exists"},{"pc":[2412],"errorMessage":"check self.campaigns entry exists"},{"pc":[1867,2476],"errorMessage":"check self.deliveries entry exists"},{"pc":[1753,1845,2492],"errorMessage":"check self.delivery_counter exists"},{"pc":[2178,2238,2325,2481],"errorMessage":"check self.milestone_counter exists"},{"pc":[2260,2460],"errorMessage":"check self.milestones entry exists"},{"pc":[1429,1599],"errorMessage":"check self.organization_counter exists"},{"pc":[2428],"errorMessage":"check self.organizations entry exists"},{"pc":[1630,1676],"errorMessage":"check self.total_donations exists"},{"pc":[2274],"errorMessage":"check self.total_milestones_completed exists"},{"pc":[1499],"errorMessage":"check self.total_organizations exists"},{"pc":[1990,2049,2487],"errorMessage":"check self.voucher_counter exists"},{"pc":[2444],"errorMessage":"check self.vouchers entry exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmEQQVH3x1EGNhbXBhaWduX2NvdW50ZXIRbWlsZXN0b25lX2NvdW50ZXIQZGVsaXZlcnlfY291bnRlcg92b3VjaGVyX2NvdW50ZXIIAAAAAAAAAAAUb3JnYW5pemF0aW9uX2NvdW50ZXIPdG90YWxfZG9uYXRpb25zE3RvdGFsX29yZ2FuaXphdGlvbnMadG90YWxfbWlsZXN0b25lc19jb21wbGV0ZWQJY2FtcGFpZ25zCAAAAAAAAAABCmRlbGl2ZXJpZXMKbWlsZXN0b25lcxV0b3RhbF92b3VjaGVyc19pc3N1ZWQEb3Jncwh2b3VjaGVyczEYQAAhKSJnJwYiZysiZycEImcqImcnByJnJwgiZycOImcnCSJnMRtBBAmCHQQCvs4RBIl60acEEdOvGQRP5v1WBBPBBbkEFJJSEgT/URVTBJ/WyXgEzboSlwRBX2QeBMidy2sEjqfg+gQVaZABBMhSe78EirahZgQhxKBmBPZK4nQEcySFZwSE7q5jBMPemlIEBtQUygRfUt9fBLRPewMEvw7gLQS/VO02BNWyDXAE83z57QS9eQmyBC2JxqE2GgCOHQMZAwEC5ALDArICoQKFAnQCWwI5AhwB+gHLAbEBfwFZASsBDADqAMQAlACBAG4AWwBIADUAJAATAAIiQzEZFEQxGESIB7YWKExQsCNDMRkURDEYRIgHnxYoTFCwI0MxGRREMRhEiAeJFihMULAjQzEZFEQxGEQ2GgGIB2UoTFCwI0MxGRREMRhENhoBiAdCKExQsCNDMRkURDEYRDYaAYgHHyhMULAjQzEZFEQxGEQ2GgGIBvwoTFCwI0MxGRREMRhENhoBiAbZKExQsCNDMRkURDEYRIAkFR98dQAeTWlsZXN0b25lIHN0YXRpc3RpY3MgYXZhaWxhYmxlsCNDMRkURDEYRDYaARc2GgIXwBw2GgMXiAY8SRUWVwYCTFAoTFCwI0MxGRREMRhENhoBFzYaAlcCAIgFw0kVFlcGAkxQKExQsCNDMRkURDEYRDYaARc2GgIXNhoDVwIAiAVKFihMULAjQzEZFEQxGESAIhUffHUAHFZvdWNoZXIgc3RhdGlzdGljcyBhdmFpbGFibGWwI0MxGRREMRhENhoBFzYaAlcCADYaAxeIBJJJFRZXBgJMUChMULAjQzEZFEQxGESAJhUffHUAIERlYnVnIG1vZGU6IHZvdWNoZXJzIGRpc3RyaWJ1dGVksCNDMRkURDEYRDYaAVcCADYaAheIA9IoTFCwI0MxGRREMRhEgCMVH3x1AB1Db250cmFjdCBzdGF0aXN0aWNzIGF2YWlsYWJsZbAjQzEZFEQxGEQ2GgEXNhoCVwIAiAMqSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCVwIAiAKqFihMULAjQzEZFEQxGEQ2GgEXNhoCVwIAiAJTSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBFzYaAheIAioWKExQsCNDMRkURDEYRIgCExYoTFCwI0MxGRREMRhENhoBF4gBt0kVFlcGAkxQKExQsCNDMRkURDEYRIgBmRYoTFCwI0MxGRREMRhEiAGDFihMULAjQzEZFEQxGEQ2GgFXAgA2GgIXNhoDVwIAiAEPFihMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAJ0WKExQsCNDMRkURDEYRIgAR0kVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCAIgAGUkVFlcGAkxQKExQsCNDMRlA/MQxGBREI0OKAQGAB0hlbGxvLCCL/1CJKSJnJwYiZysiZycEImcqImcnByJnJwgiZycOImcnCSJngCFDb250cmFjdCBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHmJigIBIicGZUQjCCcGSwFnSRaL/hUWVwYCi/5Qi/8VFlcGAov/UEsCgAIAFFBLAhWBFAgWVwYCUCcFUE8CUExQJw9PAlBJvEhMvyInCGVEIwgnCExniYoDASIpZUQjCClLAWdJFov9FRZXBgKL/VCL/haL/xUWVwYCi/9QSwOAAgAkUEsDFYEkCExPA1AnBVBMFlcGAlAnC1BPAlBMUCcKTwJQSbxITL+JIillRIkiJwZlRImKAQEiKWVEi/8PRIv/RIv/FicKTFC9RQFEIicHZUSB6AcIJwdMZ4AeRG9uYXRpb24gcmVjb3JkZWQgc3VjY2Vzc2Z1bGx5iSInB2VEiYoCAYv+i/8IiYoCAYv+QQAagBRWYWxpZCBkb25hdGlvbiBmcm9tIIv/UImAF0ludmFsaWQgZG9uYXRpb24gYW1vdW50iYoCASIrZUQjCCtLAWdJFov+FRZXBgKL/lCL/xUWVwYCi/9QSwKAAgAWUEsCFYEWCEkWVwYCTwJMUEsCFU8CCBZXBgJQJwVQTwJQTFCAAgAAUCcMTwJQSbxITL+JigIBIitlRIv+D0SL/kSL/hYnDExQSb1FAURJvkQnC1wOi/8VFlcGAov/UEsBgQxZTwIiTwJYTFBLAbxIv4AcRGVsaXZlcnkgdmVyaWZpZWQgYnkgYWdlbnQ6IIv/UImKAgGxMgAyCkcDsiyyK7IqsikisiQisiOL/7IigAdWT1VDSEVSsiWL/rImgQOyELIBs7Q8IicEZUQjCCcESwFnFkwWi/4VFlcGAov+UIv/FksDSwNQgAIAIlBMUCcFUExQJxBPA1BJvEhMv4mKAwEiJwRlRIv9DEAABYv9QAAVgBJJbnZhbGlkIHZvdWNoZXIgSUSJi/9AACOAIEFtb3VudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJviYAVVm91Y2hlcnMgcmVkZWVtZWQgYXQgi/5QiYoDASIpZUSL/Q9Ei/1Ei/0WJwpLAVC9RQFEIiplRCMIKksBZ0kWi/4Wi/8VFlcGAov/UEsCTwVQTwJQgAIAKlAnBVAnBVBMUCcNTwJQSbxITL+JigIBIiplRIv+D0SL/kSL/hYnDUxQSb1FAURJvkQnC1waSwG8SL8iJwllRCMIJwlMZ4AgTWlsZXN0b25lIGNvbXBsZXRlZCB3aXRoIHByb29mOiCL/1CJigMBIiplRIv9D0SL/USL/0SxMgCL/7IIi/6yByOyELIBs4AqUmVhbCBibG9ja2NoYWluIHBheW1lbnQgc2VudCBmb3IgbWlsZXN0b25liYoBAScKi/9QSb1FAUS+RImKAQEnD4v/UEm9RQFEvkSJigEBJxCL/1BJvUUBRL5EiYoBAScNi/9QSb1FAUS+RImKAQEnDIv/UEm9RQFEvkSJIiplRIkiJwRlRIkiK2VEiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type CampaignInfo = {
  id: bigint,
  title: string,
  target: bigint,
  raised: bigint,
  creator: string,
  active: bigint
}


/**
 * Converts the ABI tuple representation of a CampaignInfo to the struct representation
 */
export function CampaignInfoFromTuple(abiTuple: [bigint, string, bigint, bigint, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.CampaignInfo, APP_SPEC.structs) as CampaignInfo
}

export type DeliveryRecord = {
  id: bigint,
  recipient: string,
  location: string,
  agent: string,
  verified: bigint
}


/**
 * Converts the ABI tuple representation of a DeliveryRecord to the struct representation
 */
export function DeliveryRecordFromTuple(abiTuple: [bigint, string, string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.DeliveryRecord, APP_SPEC.structs) as DeliveryRecord
}

export type MilestoneInfo = {
  id: bigint,
  campaignId: bigint,
  targetAmount: bigint,
  description: string,
  completed: bigint,
  fundsReleased: bigint
}


/**
 * Converts the ABI tuple representation of a MilestoneInfo to the struct representation
 */
export function MilestoneInfoFromTuple(abiTuple: [bigint, bigint, bigint, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MilestoneInfo, APP_SPEC.structs) as MilestoneInfo
}

export type OrganizationInfo = {
  id: bigint,
  name: string,
  walletAddress: string,
  verificationLevel: bigint
}


/**
 * Converts the ABI tuple representation of a OrganizationInfo to the struct representation
 */
export function OrganizationInfoFromTuple(abiTuple: [bigint, string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.OrganizationInfo, APP_SPEC.structs) as OrganizationInfo
}

export type VoucherInfo = {
  id: bigint,
  assetId: bigint,
  name: string,
  totalSupply: bigint,
  issued: bigint
}


/**
 * Converts the ABI tuple representation of a VoucherInfo to the struct representation
 */
export function VoucherInfoFromTuple(abiTuple: [bigint, bigint, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VoucherInfo, APP_SPEC.structs) as VoucherInfo
}

/**
 * The argument types for the AidchainContracts contract
 */
export type AidchainContractsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'initialize()string': Record<string, never>
    'register_organization(string,string)uint64': {
      orgName: string
      walletAddress: string
    }
    'create_campaign(string,uint64,string)uint64': {
      title: string
      target: bigint | number
      creator: string
    }
    'get_campaign_count()uint64': Record<string, never>
    'get_organization_count()uint64': Record<string, never>
    'create_donation(uint64)string': {
      campaignId: bigint | number
    }
    'get_total_donations()uint64': Record<string, never>
    'calculate_total(uint64,uint64)uint64': {
      amount1: bigint | number
      amount2: bigint | number
    }
    'validate_donation(uint64,string)string': {
      amount: bigint | number
      donor: string
    }
    'log_delivery(string,string)uint64': {
      recipient: string
      location: string
    }
    'verify_delivery(uint64,string)string': {
      deliveryId: bigint | number
      agent: string
    }
    'get_contract_stats()string': Record<string, never>
    'create_voucher_asset(string,uint64)uint64': {
      assetName: string
      totalSupply: bigint | number
    }
    'distribute_vouchers(uint64,string,uint64)string': {
      assetId: bigint | number
      recipient: string
      amount: bigint | number
    }
    'redeem_voucher(uint64,string,uint64)string': {
      voucherId: bigint | number
      merchant: string
      amount: bigint | number
    }
    'get_voucher_stats()string': Record<string, never>
    'create_milestone(uint64,uint64,string)uint64': {
      campaignId: bigint | number
      targetAmount: bigint | number
      description: string
    }
    'complete_milestone(uint64,string)string': {
      milestoneId: bigint | number
      proof: string
    }
    'release_milestone_funds(uint64,account,uint64)string': {
      milestoneId: bigint | number
      recipient: Uint8Array | string
      amount: bigint | number
    }
    'get_milestone_stats()string': Record<string, never>
    'get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)': {
      campaignId: bigint | number
    }
    'get_organization_details(uint64)(uint64,string,string,uint64)': {
      orgId: bigint | number
    }
    'get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)': {
      voucherId: bigint | number
    }
    'get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)': {
      milestoneId: bigint | number
    }
    'get_delivery_details(uint64)(uint64,string,string,string,uint64)': {
      deliveryId: bigint | number
    }
    'get_milestone_count()uint64': Record<string, never>
    'get_voucher_count()uint64': Record<string, never>
    'get_delivery_count()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'initialize()string': []
    'register_organization(string,string)uint64': [orgName: string, walletAddress: string]
    'create_campaign(string,uint64,string)uint64': [title: string, target: bigint | number, creator: string]
    'get_campaign_count()uint64': []
    'get_organization_count()uint64': []
    'create_donation(uint64)string': [campaignId: bigint | number]
    'get_total_donations()uint64': []
    'calculate_total(uint64,uint64)uint64': [amount1: bigint | number, amount2: bigint | number]
    'validate_donation(uint64,string)string': [amount: bigint | number, donor: string]
    'log_delivery(string,string)uint64': [recipient: string, location: string]
    'verify_delivery(uint64,string)string': [deliveryId: bigint | number, agent: string]
    'get_contract_stats()string': []
    'create_voucher_asset(string,uint64)uint64': [assetName: string, totalSupply: bigint | number]
    'distribute_vouchers(uint64,string,uint64)string': [assetId: bigint | number, recipient: string, amount: bigint | number]
    'redeem_voucher(uint64,string,uint64)string': [voucherId: bigint | number, merchant: string, amount: bigint | number]
    'get_voucher_stats()string': []
    'create_milestone(uint64,uint64,string)uint64': [campaignId: bigint | number, targetAmount: bigint | number, description: string]
    'complete_milestone(uint64,string)string': [milestoneId: bigint | number, proof: string]
    'release_milestone_funds(uint64,account,uint64)string': [milestoneId: bigint | number, recipient: Uint8Array | string, amount: bigint | number]
    'get_milestone_stats()string': []
    'get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)': [campaignId: bigint | number]
    'get_organization_details(uint64)(uint64,string,string,uint64)': [orgId: bigint | number]
    'get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)': [voucherId: bigint | number]
    'get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)': [milestoneId: bigint | number]
    'get_delivery_details(uint64)(uint64,string,string,string,uint64)': [deliveryId: bigint | number]
    'get_milestone_count()uint64': []
    'get_voucher_count()uint64': []
    'get_delivery_count()uint64': []
  }
}

/**
 * The return type for each method
 */
export type AidchainContractsReturns = {
  'hello(string)string': string
  'initialize()string': string
  'register_organization(string,string)uint64': bigint
  'create_campaign(string,uint64,string)uint64': bigint
  'get_campaign_count()uint64': bigint
  'get_organization_count()uint64': bigint
  'create_donation(uint64)string': string
  'get_total_donations()uint64': bigint
  'calculate_total(uint64,uint64)uint64': bigint
  'validate_donation(uint64,string)string': string
  'log_delivery(string,string)uint64': bigint
  'verify_delivery(uint64,string)string': string
  'get_contract_stats()string': string
  'create_voucher_asset(string,uint64)uint64': bigint
  'distribute_vouchers(uint64,string,uint64)string': string
  'redeem_voucher(uint64,string,uint64)string': string
  'get_voucher_stats()string': string
  'create_milestone(uint64,uint64,string)uint64': bigint
  'complete_milestone(uint64,string)string': string
  'release_milestone_funds(uint64,account,uint64)string': string
  'get_milestone_stats()string': string
  'get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)': CampaignInfo
  'get_organization_details(uint64)(uint64,string,string,uint64)': OrganizationInfo
  'get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)': VoucherInfo
  'get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)': MilestoneInfo
  'get_delivery_details(uint64)(uint64,string,string,string,uint64)': DeliveryRecord
  'get_milestone_count()uint64': bigint
  'get_voucher_count()uint64': bigint
  'get_delivery_count()uint64': bigint
}

/**
 * Defines the types of available calls and state of the AidchainContracts smart contract.
 */
export type AidchainContractsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: AidchainContractsArgs['obj']['hello(string)string']
      argsTuple: AidchainContractsArgs['tuple']['hello(string)string']
      returns: AidchainContractsReturns['hello(string)string']
    }>
    & Record<'initialize()string' | 'initialize', {
      argsObj: AidchainContractsArgs['obj']['initialize()string']
      argsTuple: AidchainContractsArgs['tuple']['initialize()string']
      returns: AidchainContractsReturns['initialize()string']
    }>
    & Record<'register_organization(string,string)uint64' | 'register_organization', {
      argsObj: AidchainContractsArgs['obj']['register_organization(string,string)uint64']
      argsTuple: AidchainContractsArgs['tuple']['register_organization(string,string)uint64']
      returns: AidchainContractsReturns['register_organization(string,string)uint64']
    }>
    & Record<'create_campaign(string,uint64,string)uint64' | 'create_campaign', {
      argsObj: AidchainContractsArgs['obj']['create_campaign(string,uint64,string)uint64']
      argsTuple: AidchainContractsArgs['tuple']['create_campaign(string,uint64,string)uint64']
      returns: AidchainContractsReturns['create_campaign(string,uint64,string)uint64']
    }>
    & Record<'get_campaign_count()uint64' | 'get_campaign_count', {
      argsObj: AidchainContractsArgs['obj']['get_campaign_count()uint64']
      argsTuple: AidchainContractsArgs['tuple']['get_campaign_count()uint64']
      returns: AidchainContractsReturns['get_campaign_count()uint64']
    }>
    & Record<'get_organization_count()uint64' | 'get_organization_count', {
      argsObj: AidchainContractsArgs['obj']['get_organization_count()uint64']
      argsTuple: AidchainContractsArgs['tuple']['get_organization_count()uint64']
      returns: AidchainContractsReturns['get_organization_count()uint64']
    }>
    & Record<'create_donation(uint64)string' | 'create_donation', {
      argsObj: AidchainContractsArgs['obj']['create_donation(uint64)string']
      argsTuple: AidchainContractsArgs['tuple']['create_donation(uint64)string']
      returns: AidchainContractsReturns['create_donation(uint64)string']
    }>
    & Record<'get_total_donations()uint64' | 'get_total_donations', {
      argsObj: AidchainContractsArgs['obj']['get_total_donations()uint64']
      argsTuple: AidchainContractsArgs['tuple']['get_total_donations()uint64']
      returns: AidchainContractsReturns['get_total_donations()uint64']
    }>
    & Record<'calculate_total(uint64,uint64)uint64' | 'calculate_total', {
      argsObj: AidchainContractsArgs['obj']['calculate_total(uint64,uint64)uint64']
      argsTuple: AidchainContractsArgs['tuple']['calculate_total(uint64,uint64)uint64']
      returns: AidchainContractsReturns['calculate_total(uint64,uint64)uint64']
    }>
    & Record<'validate_donation(uint64,string)string' | 'validate_donation', {
      argsObj: AidchainContractsArgs['obj']['validate_donation(uint64,string)string']
      argsTuple: AidchainContractsArgs['tuple']['validate_donation(uint64,string)string']
      returns: AidchainContractsReturns['validate_donation(uint64,string)string']
    }>
    & Record<'log_delivery(string,string)uint64' | 'log_delivery', {
      argsObj: AidchainContractsArgs['obj']['log_delivery(string,string)uint64']
      argsTuple: AidchainContractsArgs['tuple']['log_delivery(string,string)uint64']
      returns: AidchainContractsReturns['log_delivery(string,string)uint64']
    }>
    & Record<'verify_delivery(uint64,string)string' | 'verify_delivery', {
      argsObj: AidchainContractsArgs['obj']['verify_delivery(uint64,string)string']
      argsTuple: AidchainContractsArgs['tuple']['verify_delivery(uint64,string)string']
      returns: AidchainContractsReturns['verify_delivery(uint64,string)string']
    }>
    & Record<'get_contract_stats()string' | 'get_contract_stats', {
      argsObj: AidchainContractsArgs['obj']['get_contract_stats()string']
      argsTuple: AidchainContractsArgs['tuple']['get_contract_stats()string']
      returns: AidchainContractsReturns['get_contract_stats()string']
    }>
    & Record<'create_voucher_asset(string,uint64)uint64' | 'create_voucher_asset', {
      argsObj: AidchainContractsArgs['obj']['create_voucher_asset(string,uint64)uint64']
      argsTuple: AidchainContractsArgs['tuple']['create_voucher_asset(string,uint64)uint64']
      returns: AidchainContractsReturns['create_voucher_asset(string,uint64)uint64']
    }>
    & Record<'distribute_vouchers(uint64,string,uint64)string' | 'distribute_vouchers', {
      argsObj: AidchainContractsArgs['obj']['distribute_vouchers(uint64,string,uint64)string']
      argsTuple: AidchainContractsArgs['tuple']['distribute_vouchers(uint64,string,uint64)string']
      returns: AidchainContractsReturns['distribute_vouchers(uint64,string,uint64)string']
    }>
    & Record<'redeem_voucher(uint64,string,uint64)string' | 'redeem_voucher', {
      argsObj: AidchainContractsArgs['obj']['redeem_voucher(uint64,string,uint64)string']
      argsTuple: AidchainContractsArgs['tuple']['redeem_voucher(uint64,string,uint64)string']
      returns: AidchainContractsReturns['redeem_voucher(uint64,string,uint64)string']
    }>
    & Record<'get_voucher_stats()string' | 'get_voucher_stats', {
      argsObj: AidchainContractsArgs['obj']['get_voucher_stats()string']
      argsTuple: AidchainContractsArgs['tuple']['get_voucher_stats()string']
      returns: AidchainContractsReturns['get_voucher_stats()string']
    }>
    & Record<'create_milestone(uint64,uint64,string)uint64' | 'create_milestone', {
      argsObj: AidchainContractsArgs['obj']['create_milestone(uint64,uint64,string)uint64']
      argsTuple: AidchainContractsArgs['tuple']['create_milestone(uint64,uint64,string)uint64']
      returns: AidchainContractsReturns['create_milestone(uint64,uint64,string)uint64']
    }>
    & Record<'complete_milestone(uint64,string)string' | 'complete_milestone', {
      argsObj: AidchainContractsArgs['obj']['complete_milestone(uint64,string)string']
      argsTuple: AidchainContractsArgs['tuple']['complete_milestone(uint64,string)string']
      returns: AidchainContractsReturns['complete_milestone(uint64,string)string']
    }>
    & Record<'release_milestone_funds(uint64,account,uint64)string' | 'release_milestone_funds', {
      argsObj: AidchainContractsArgs['obj']['release_milestone_funds(uint64,account,uint64)string']
      argsTuple: AidchainContractsArgs['tuple']['release_milestone_funds(uint64,account,uint64)string']
      returns: AidchainContractsReturns['release_milestone_funds(uint64,account,uint64)string']
    }>
    & Record<'get_milestone_stats()string' | 'get_milestone_stats', {
      argsObj: AidchainContractsArgs['obj']['get_milestone_stats()string']
      argsTuple: AidchainContractsArgs['tuple']['get_milestone_stats()string']
      returns: AidchainContractsReturns['get_milestone_stats()string']
    }>
    & Record<'get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)' | 'get_campaign_details', {
      argsObj: AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']
      argsTuple: AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']
      returns: AidchainContractsReturns['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']
    }>
    & Record<'get_organization_details(uint64)(uint64,string,string,uint64)' | 'get_organization_details', {
      argsObj: AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)']
      argsTuple: AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']
      returns: AidchainContractsReturns['get_organization_details(uint64)(uint64,string,string,uint64)']
    }>
    & Record<'get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)' | 'get_voucher_details', {
      argsObj: AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']
      argsTuple: AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']
      returns: AidchainContractsReturns['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']
    }>
    & Record<'get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)' | 'get_milestone_details', {
      argsObj: AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']
      argsTuple: AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']
      returns: AidchainContractsReturns['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']
    }>
    & Record<'get_delivery_details(uint64)(uint64,string,string,string,uint64)' | 'get_delivery_details', {
      argsObj: AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']
      argsTuple: AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']
      returns: AidchainContractsReturns['get_delivery_details(uint64)(uint64,string,string,string,uint64)']
    }>
    & Record<'get_milestone_count()uint64' | 'get_milestone_count', {
      argsObj: AidchainContractsArgs['obj']['get_milestone_count()uint64']
      argsTuple: AidchainContractsArgs['tuple']['get_milestone_count()uint64']
      returns: AidchainContractsReturns['get_milestone_count()uint64']
    }>
    & Record<'get_voucher_count()uint64' | 'get_voucher_count', {
      argsObj: AidchainContractsArgs['obj']['get_voucher_count()uint64']
      argsTuple: AidchainContractsArgs['tuple']['get_voucher_count()uint64']
      returns: AidchainContractsReturns['get_voucher_count()uint64']
    }>
    & Record<'get_delivery_count()uint64' | 'get_delivery_count', {
      argsObj: AidchainContractsArgs['obj']['get_delivery_count()uint64']
      argsTuple: AidchainContractsArgs['tuple']['get_delivery_count()uint64']
      returns: AidchainContractsReturns['get_delivery_count()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        campaignCounter: bigint
        organizationCounter: bigint
        deliveryCounter: bigint
        voucherCounter: bigint
        milestoneCounter: bigint
        totalDonations: bigint
        totalOrganizations: bigint
        totalVouchersIssued: bigint
        totalMilestonesCompleted: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        campaigns: Map<bigint | number, CampaignInfo>
        organizations: Map<bigint | number, OrganizationInfo>
        milestones: Map<bigint | number, MilestoneInfo>
        deliveries: Map<bigint | number, DeliveryRecord>
        vouchers: Map<bigint | number, VoucherInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AidchainContractsSignatures = keyof AidchainContractsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AidchainContractsNonVoidMethodSignatures = keyof AidchainContractsTypes['methods'] extends infer T ? T extends keyof AidchainContractsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AidchainContracts smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AidchainContractsSignatures> = AidchainContractsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AidchainContracts smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AidchainContractsSignatures> = AidchainContractsTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AidchainContractsTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AidchainContractsTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AidchainContractsCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AidchainContractsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AidchainContractsCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AidchainContracts smart contract
 */
export abstract class AidchainContractsParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<AidchainContractsArgs['obj']['hello(string)string'] | AidchainContractsArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the initialize()string ABI method
   *
   * Initialize the contract with default values
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<AidchainContractsArgs['obj']['initialize()string'] | AidchainContractsArgs['tuple']['initialize()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the register_organization(string,string)uint64 ABI method
   *
   * Register a new organization in the system with proper data storage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerOrganization(params: CallParams<AidchainContractsArgs['obj']['register_organization(string,string)uint64'] | AidchainContractsArgs['tuple']['register_organization(string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register_organization(string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orgName, params.args.walletAddress],
    }
  }
  /**
   * Constructs a no op call for the create_campaign(string,uint64,string)uint64 ABI method
   *
   * Create a new donation campaign with proper data storage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createCampaign(params: CallParams<AidchainContractsArgs['obj']['create_campaign(string,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_campaign(string,uint64,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_campaign(string,uint64,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.title, params.args.target, params.args.creator],
    }
  }
  /**
   * Constructs a no op call for the get_campaign_count()uint64 ABI method
   *
   * Get total number of campaigns created
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCampaignCount(params: CallParams<AidchainContractsArgs['obj']['get_campaign_count()uint64'] | AidchainContractsArgs['tuple']['get_campaign_count()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_campaign_count()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_organization_count()uint64 ABI method
   *
   * Get total number of organizations registered
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOrganizationCount(params: CallParams<AidchainContractsArgs['obj']['get_organization_count()uint64'] | AidchainContractsArgs['tuple']['get_organization_count()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_organization_count()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the create_donation(uint64)string ABI method
   *
   * Create a donation record (for testing without payment)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createDonation(params: CallParams<AidchainContractsArgs['obj']['create_donation(uint64)string'] | AidchainContractsArgs['tuple']['create_donation(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_donation(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.campaignId],
    }
  }
  /**
   * Constructs a no op call for the get_total_donations()uint64 ABI method
   *
   * Get total amount of donations across all campaigns
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalDonations(params: CallParams<AidchainContractsArgs['obj']['get_total_donations()uint64'] | AidchainContractsArgs['tuple']['get_total_donations()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_donations()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculate_total(uint64,uint64)uint64 ABI method
   *
   * Calculate total of two amounts
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateTotal(params: CallParams<AidchainContractsArgs['obj']['calculate_total(uint64,uint64)uint64'] | AidchainContractsArgs['tuple']['calculate_total(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_total(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount1, params.args.amount2],
    }
  }
  /**
   * Constructs a no op call for the validate_donation(uint64,string)string ABI method
   *
   * Validate donation parameters
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static validateDonation(params: CallParams<AidchainContractsArgs['obj']['validate_donation(uint64,string)string'] | AidchainContractsArgs['tuple']['validate_donation(uint64,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'validate_donation(uint64,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.donor],
    }
  }
  /**
   * Constructs a no op call for the log_delivery(string,string)uint64 ABI method
   *
   * Log a delivery event
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static logDelivery(params: CallParams<AidchainContractsArgs['obj']['log_delivery(string,string)uint64'] | AidchainContractsArgs['tuple']['log_delivery(string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'log_delivery(string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipient, params.args.location],
    }
  }
  /**
   * Constructs a no op call for the verify_delivery(uint64,string)string ABI method
   *
   * Verify a delivery by an authorized agent
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyDelivery(params: CallParams<AidchainContractsArgs['obj']['verify_delivery(uint64,string)string'] | AidchainContractsArgs['tuple']['verify_delivery(uint64,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verify_delivery(uint64,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.deliveryId, params.args.agent],
    }
  }
  /**
   * Constructs a no op call for the get_contract_stats()string ABI method
   *
   * Get overall contract statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<AidchainContractsArgs['obj']['get_contract_stats()string'] | AidchainContractsArgs['tuple']['get_contract_stats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_contract_stats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the create_voucher_asset(string,uint64)uint64 ABI method
   *
   * Create a REAL ASA token on the blockchain for aid distribution
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createVoucherAsset(params: CallParams<AidchainContractsArgs['obj']['create_voucher_asset(string,uint64)uint64'] | AidchainContractsArgs['tuple']['create_voucher_asset(string,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_voucher_asset(string,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetName, params.args.totalSupply],
    }
  }
  /**
   * Constructs a no op call for the distribute_vouchers(uint64,string,uint64)string ABI method
   *
   * REAL blockchain token transfer to recipient
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeVouchers(params: CallParams<AidchainContractsArgs['obj']['distribute_vouchers(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['distribute_vouchers(uint64,string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distribute_vouchers(uint64,string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.recipient, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the redeem_voucher(uint64,string,uint64)string ABI method
   *
   * Redeem voucher tokens at an approved merchant
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static redeemVoucher(params: CallParams<AidchainContractsArgs['obj']['redeem_voucher(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['redeem_voucher(uint64,string,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'redeem_voucher(uint64,string,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voucherId, params.args.merchant, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_voucher_stats()string ABI method
   *
   * Get voucher system statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVoucherStats(params: CallParams<AidchainContractsArgs['obj']['get_voucher_stats()string'] | AidchainContractsArgs['tuple']['get_voucher_stats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_voucher_stats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the create_milestone(uint64,uint64,string)uint64 ABI method
   *
   * Create a new milestone for campaign funding
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createMilestone(params: CallParams<AidchainContractsArgs['obj']['create_milestone(uint64,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_milestone(uint64,uint64,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_milestone(uint64,uint64,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.campaignId, params.args.targetAmount, params.args.description],
    }
  }
  /**
   * Constructs a no op call for the complete_milestone(uint64,string)string ABI method
   *
   * Mark milestone as completed with proof
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static completeMilestone(params: CallParams<AidchainContractsArgs['obj']['complete_milestone(uint64,string)string'] | AidchainContractsArgs['tuple']['complete_milestone(uint64,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'complete_milestone(uint64,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.milestoneId, params.args.proof],
    }
  }
  /**
   * Constructs a no op call for the release_milestone_funds(uint64,account,uint64)string ABI method
   *
   * Release REAL funds for completed milestone via blockchain payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static releaseMilestoneFunds(params: CallParams<AidchainContractsArgs['obj']['release_milestone_funds(uint64,account,uint64)string'] | AidchainContractsArgs['tuple']['release_milestone_funds(uint64,account,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'release_milestone_funds(uint64,account,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.milestoneId, params.args.recipient, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_milestone_stats()string ABI method
   *
   * Get milestone system statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMilestoneStats(params: CallParams<AidchainContractsArgs['obj']['get_milestone_stats()string'] | AidchainContractsArgs['tuple']['get_milestone_stats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_milestone_stats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64) ABI method
   *
   * Get detailed information about a campaign
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCampaignDetails(params: CallParams<AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.campaignId],
    }
  }
  /**
   * Constructs a no op call for the get_organization_details(uint64)(uint64,string,string,uint64) ABI method
   *
   * Get detailed information about an organization
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOrganizationDetails(params: CallParams<AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_organization_details(uint64)(uint64,string,string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orgId],
    }
  }
  /**
   * Constructs a no op call for the get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64) ABI method
   *
   * Get detailed information about a voucher
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVoucherDetails(params: CallParams<AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voucherId],
    }
  }
  /**
   * Constructs a no op call for the get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64) ABI method
   *
   * Get detailed information about a milestone
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMilestoneDetails(params: CallParams<AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.milestoneId],
    }
  }
  /**
   * Constructs a no op call for the get_delivery_details(uint64)(uint64,string,string,string,uint64) ABI method
   *
   * Get detailed information about a delivery
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDeliveryDetails(params: CallParams<AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_delivery_details(uint64)(uint64,string,string,string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.deliveryId],
    }
  }
  /**
   * Constructs a no op call for the get_milestone_count()uint64 ABI method
   *
   * Get total number of milestones created
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMilestoneCount(params: CallParams<AidchainContractsArgs['obj']['get_milestone_count()uint64'] | AidchainContractsArgs['tuple']['get_milestone_count()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_milestone_count()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_voucher_count()uint64 ABI method
   *
   * Get total number of vouchers created
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVoucherCount(params: CallParams<AidchainContractsArgs['obj']['get_voucher_count()uint64'] | AidchainContractsArgs['tuple']['get_voucher_count()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_voucher_count()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_delivery_count()uint64 ABI method
   *
   * Get total number of deliveries logged
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDeliveryCount(params: CallParams<AidchainContractsArgs['obj']['get_delivery_count()uint64'] | AidchainContractsArgs['tuple']['get_delivery_count()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_delivery_count()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AidchainContracts smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AidchainContractsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AidchainContractsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AidchainContractsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AidchainContractsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AidchainContracts smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AidchainContractsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AidchainContractsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AidchainContracts smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AidchainContracts smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AidchainContracts smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AidchainContractsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AidchainContracts smart contract
 */
export class AidchainContractsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AidchainContractsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AidchainContracts app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AidchainContractsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AidchainContractsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AidchainContractsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AidchainContractsClient> {
    return new AidchainContractsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AidchainContractsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AidchainContractsClient> {
    return new AidchainContractsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AidchainContracts smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<AidchainContractsArgs['obj']['hello(string)string'] | AidchainContractsArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.hello(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `initialize()string` ABI method.
     *
     * Initialize the contract with default values
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<AidchainContractsArgs['obj']['initialize()string'] | AidchainContractsArgs['tuple']['initialize()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `register_organization(string,string)uint64` ABI method.
     *
     * Register a new organization in the system with proper data storage
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerOrganization: (params: CallParams<AidchainContractsArgs['obj']['register_organization(string,string)uint64'] | AidchainContractsArgs['tuple']['register_organization(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.registerOrganization(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_campaign(string,uint64,string)uint64` ABI method.
     *
     * Create a new donation campaign with proper data storage
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createCampaign: (params: CallParams<AidchainContractsArgs['obj']['create_campaign(string,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_campaign(string,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.createCampaign(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_campaign_count()uint64` ABI method.
     *
     * Get total number of campaigns created
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCampaignCount: (params: CallParams<AidchainContractsArgs['obj']['get_campaign_count()uint64'] | AidchainContractsArgs['tuple']['get_campaign_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getCampaignCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_organization_count()uint64` ABI method.
     *
     * Get total number of organizations registered
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOrganizationCount: (params: CallParams<AidchainContractsArgs['obj']['get_organization_count()uint64'] | AidchainContractsArgs['tuple']['get_organization_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getOrganizationCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_donation(uint64)string` ABI method.
     *
     * Create a donation record (for testing without payment)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createDonation: (params: CallParams<AidchainContractsArgs['obj']['create_donation(uint64)string'] | AidchainContractsArgs['tuple']['create_donation(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.createDonation(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_total_donations()uint64` ABI method.
     *
     * Get total amount of donations across all campaigns
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalDonations: (params: CallParams<AidchainContractsArgs['obj']['get_total_donations()uint64'] | AidchainContractsArgs['tuple']['get_total_donations()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getTotalDonations(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `calculate_total(uint64,uint64)uint64` ABI method.
     *
     * Calculate total of two amounts
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateTotal: (params: CallParams<AidchainContractsArgs['obj']['calculate_total(uint64,uint64)uint64'] | AidchainContractsArgs['tuple']['calculate_total(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.calculateTotal(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `validate_donation(uint64,string)string` ABI method.
     *
     * Validate donation parameters
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    validateDonation: (params: CallParams<AidchainContractsArgs['obj']['validate_donation(uint64,string)string'] | AidchainContractsArgs['tuple']['validate_donation(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.validateDonation(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `log_delivery(string,string)uint64` ABI method.
     *
     * Log a delivery event
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    logDelivery: (params: CallParams<AidchainContractsArgs['obj']['log_delivery(string,string)uint64'] | AidchainContractsArgs['tuple']['log_delivery(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.logDelivery(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `verify_delivery(uint64,string)string` ABI method.
     *
     * Verify a delivery by an authorized agent
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyDelivery: (params: CallParams<AidchainContractsArgs['obj']['verify_delivery(uint64,string)string'] | AidchainContractsArgs['tuple']['verify_delivery(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.verifyDelivery(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_contract_stats()string` ABI method.
     *
     * Get overall contract statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<AidchainContractsArgs['obj']['get_contract_stats()string'] | AidchainContractsArgs['tuple']['get_contract_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_voucher_asset(string,uint64)uint64` ABI method.
     *
     * Create a REAL ASA token on the blockchain for aid distribution
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createVoucherAsset: (params: CallParams<AidchainContractsArgs['obj']['create_voucher_asset(string,uint64)uint64'] | AidchainContractsArgs['tuple']['create_voucher_asset(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.createVoucherAsset(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `distribute_vouchers(uint64,string,uint64)string` ABI method.
     *
     * REAL blockchain token transfer to recipient
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeVouchers: (params: CallParams<AidchainContractsArgs['obj']['distribute_vouchers(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['distribute_vouchers(uint64,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.distributeVouchers(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `redeem_voucher(uint64,string,uint64)string` ABI method.
     *
     * Redeem voucher tokens at an approved merchant
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    redeemVoucher: (params: CallParams<AidchainContractsArgs['obj']['redeem_voucher(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['redeem_voucher(uint64,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.redeemVoucher(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_stats()string` ABI method.
     *
     * Get voucher system statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVoucherStats: (params: CallParams<AidchainContractsArgs['obj']['get_voucher_stats()string'] | AidchainContractsArgs['tuple']['get_voucher_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getVoucherStats(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_milestone(uint64,uint64,string)uint64` ABI method.
     *
     * Create a new milestone for campaign funding
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createMilestone: (params: CallParams<AidchainContractsArgs['obj']['create_milestone(uint64,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_milestone(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.createMilestone(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `complete_milestone(uint64,string)string` ABI method.
     *
     * Mark milestone as completed with proof
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    completeMilestone: (params: CallParams<AidchainContractsArgs['obj']['complete_milestone(uint64,string)string'] | AidchainContractsArgs['tuple']['complete_milestone(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.completeMilestone(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `release_milestone_funds(uint64,account,uint64)string` ABI method.
     *
     * Release REAL funds for completed milestone via blockchain payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    releaseMilestoneFunds: (params: CallParams<AidchainContractsArgs['obj']['release_milestone_funds(uint64,account,uint64)string'] | AidchainContractsArgs['tuple']['release_milestone_funds(uint64,account,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.releaseMilestoneFunds(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_stats()string` ABI method.
     *
     * Get milestone system statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMilestoneStats: (params: CallParams<AidchainContractsArgs['obj']['get_milestone_stats()string'] | AidchainContractsArgs['tuple']['get_milestone_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getMilestoneStats(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a campaign
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCampaignDetails: (params: CallParams<AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getCampaignDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_organization_details(uint64)(uint64,string,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about an organization
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOrganizationDetails: (params: CallParams<AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getOrganizationDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a voucher
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVoucherDetails: (params: CallParams<AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getVoucherDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a milestone
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMilestoneDetails: (params: CallParams<AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getMilestoneDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_delivery_details(uint64)(uint64,string,string,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a delivery
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getDeliveryDetails: (params: CallParams<AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getDeliveryDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of milestones created
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMilestoneCount: (params: CallParams<AidchainContractsArgs['obj']['get_milestone_count()uint64'] | AidchainContractsArgs['tuple']['get_milestone_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getMilestoneCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of vouchers created
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVoucherCount: (params: CallParams<AidchainContractsArgs['obj']['get_voucher_count()uint64'] | AidchainContractsArgs['tuple']['get_voucher_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getVoucherCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_delivery_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of deliveries logged
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getDeliveryCount: (params: CallParams<AidchainContractsArgs['obj']['get_delivery_count()uint64'] | AidchainContractsArgs['tuple']['get_delivery_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AidchainContractsParamsFactory.getDeliveryCount(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AidchainContracts smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<AidchainContractsArgs['obj']['hello(string)string'] | AidchainContractsArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.hello(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `initialize()string` ABI method.
     *
     * Initialize the contract with default values
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<AidchainContractsArgs['obj']['initialize()string'] | AidchainContractsArgs['tuple']['initialize()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `register_organization(string,string)uint64` ABI method.
     *
     * Register a new organization in the system with proper data storage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerOrganization: (params: CallParams<AidchainContractsArgs['obj']['register_organization(string,string)uint64'] | AidchainContractsArgs['tuple']['register_organization(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.registerOrganization(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_campaign(string,uint64,string)uint64` ABI method.
     *
     * Create a new donation campaign with proper data storage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createCampaign: (params: CallParams<AidchainContractsArgs['obj']['create_campaign(string,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_campaign(string,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.createCampaign(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_campaign_count()uint64` ABI method.
     *
     * Get total number of campaigns created
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCampaignCount: (params: CallParams<AidchainContractsArgs['obj']['get_campaign_count()uint64'] | AidchainContractsArgs['tuple']['get_campaign_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getCampaignCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_organization_count()uint64` ABI method.
     *
     * Get total number of organizations registered
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOrganizationCount: (params: CallParams<AidchainContractsArgs['obj']['get_organization_count()uint64'] | AidchainContractsArgs['tuple']['get_organization_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getOrganizationCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_donation(uint64)string` ABI method.
     *
     * Create a donation record (for testing without payment)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createDonation: (params: CallParams<AidchainContractsArgs['obj']['create_donation(uint64)string'] | AidchainContractsArgs['tuple']['create_donation(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.createDonation(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_total_donations()uint64` ABI method.
     *
     * Get total amount of donations across all campaigns
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalDonations: (params: CallParams<AidchainContractsArgs['obj']['get_total_donations()uint64'] | AidchainContractsArgs['tuple']['get_total_donations()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getTotalDonations(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `calculate_total(uint64,uint64)uint64` ABI method.
     *
     * Calculate total of two amounts
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateTotal: (params: CallParams<AidchainContractsArgs['obj']['calculate_total(uint64,uint64)uint64'] | AidchainContractsArgs['tuple']['calculate_total(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.calculateTotal(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `validate_donation(uint64,string)string` ABI method.
     *
     * Validate donation parameters
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    validateDonation: (params: CallParams<AidchainContractsArgs['obj']['validate_donation(uint64,string)string'] | AidchainContractsArgs['tuple']['validate_donation(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.validateDonation(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `log_delivery(string,string)uint64` ABI method.
     *
     * Log a delivery event
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    logDelivery: (params: CallParams<AidchainContractsArgs['obj']['log_delivery(string,string)uint64'] | AidchainContractsArgs['tuple']['log_delivery(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.logDelivery(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `verify_delivery(uint64,string)string` ABI method.
     *
     * Verify a delivery by an authorized agent
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyDelivery: (params: CallParams<AidchainContractsArgs['obj']['verify_delivery(uint64,string)string'] | AidchainContractsArgs['tuple']['verify_delivery(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.verifyDelivery(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_contract_stats()string` ABI method.
     *
     * Get overall contract statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<AidchainContractsArgs['obj']['get_contract_stats()string'] | AidchainContractsArgs['tuple']['get_contract_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_voucher_asset(string,uint64)uint64` ABI method.
     *
     * Create a REAL ASA token on the blockchain for aid distribution
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createVoucherAsset: (params: CallParams<AidchainContractsArgs['obj']['create_voucher_asset(string,uint64)uint64'] | AidchainContractsArgs['tuple']['create_voucher_asset(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.createVoucherAsset(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `distribute_vouchers(uint64,string,uint64)string` ABI method.
     *
     * REAL blockchain token transfer to recipient
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeVouchers: (params: CallParams<AidchainContractsArgs['obj']['distribute_vouchers(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['distribute_vouchers(uint64,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.distributeVouchers(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `redeem_voucher(uint64,string,uint64)string` ABI method.
     *
     * Redeem voucher tokens at an approved merchant
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    redeemVoucher: (params: CallParams<AidchainContractsArgs['obj']['redeem_voucher(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['redeem_voucher(uint64,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.redeemVoucher(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_stats()string` ABI method.
     *
     * Get voucher system statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVoucherStats: (params: CallParams<AidchainContractsArgs['obj']['get_voucher_stats()string'] | AidchainContractsArgs['tuple']['get_voucher_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getVoucherStats(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_milestone(uint64,uint64,string)uint64` ABI method.
     *
     * Create a new milestone for campaign funding
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createMilestone: (params: CallParams<AidchainContractsArgs['obj']['create_milestone(uint64,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_milestone(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.createMilestone(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `complete_milestone(uint64,string)string` ABI method.
     *
     * Mark milestone as completed with proof
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    completeMilestone: (params: CallParams<AidchainContractsArgs['obj']['complete_milestone(uint64,string)string'] | AidchainContractsArgs['tuple']['complete_milestone(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.completeMilestone(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `release_milestone_funds(uint64,account,uint64)string` ABI method.
     *
     * Release REAL funds for completed milestone via blockchain payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    releaseMilestoneFunds: (params: CallParams<AidchainContractsArgs['obj']['release_milestone_funds(uint64,account,uint64)string'] | AidchainContractsArgs['tuple']['release_milestone_funds(uint64,account,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.releaseMilestoneFunds(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_stats()string` ABI method.
     *
     * Get milestone system statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMilestoneStats: (params: CallParams<AidchainContractsArgs['obj']['get_milestone_stats()string'] | AidchainContractsArgs['tuple']['get_milestone_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getMilestoneStats(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a campaign
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCampaignDetails: (params: CallParams<AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getCampaignDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_organization_details(uint64)(uint64,string,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about an organization
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOrganizationDetails: (params: CallParams<AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getOrganizationDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a voucher
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVoucherDetails: (params: CallParams<AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getVoucherDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a milestone
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMilestoneDetails: (params: CallParams<AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getMilestoneDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_delivery_details(uint64)(uint64,string,string,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a delivery
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getDeliveryDetails: (params: CallParams<AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getDeliveryDetails(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of milestones created
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMilestoneCount: (params: CallParams<AidchainContractsArgs['obj']['get_milestone_count()uint64'] | AidchainContractsArgs['tuple']['get_milestone_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getMilestoneCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of vouchers created
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVoucherCount: (params: CallParams<AidchainContractsArgs['obj']['get_voucher_count()uint64'] | AidchainContractsArgs['tuple']['get_voucher_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getVoucherCount(params))
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_delivery_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of deliveries logged
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getDeliveryCount: (params: CallParams<AidchainContractsArgs['obj']['get_delivery_count()uint64'] | AidchainContractsArgs['tuple']['get_delivery_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AidchainContractsParamsFactory.getDeliveryCount(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AidchainContracts smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<AidchainContractsArgs['obj']['hello(string)string'] | AidchainContractsArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `initialize()string` ABI method.
     *
     * Initialize the contract with default values
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<AidchainContractsArgs['obj']['initialize()string'] | AidchainContractsArgs['tuple']['initialize()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['initialize()string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `register_organization(string,string)uint64` ABI method.
     *
     * Register a new organization in the system with proper data storage
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerOrganization: async (params: CallParams<AidchainContractsArgs['obj']['register_organization(string,string)uint64'] | AidchainContractsArgs['tuple']['register_organization(string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.registerOrganization(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['register_organization(string,string)uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_campaign(string,uint64,string)uint64` ABI method.
     *
     * Create a new donation campaign with proper data storage
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createCampaign: async (params: CallParams<AidchainContractsArgs['obj']['create_campaign(string,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_campaign(string,uint64,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.createCampaign(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['create_campaign(string,uint64,string)uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_campaign_count()uint64` ABI method.
     *
     * Get total number of campaigns created
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCampaignCount: async (params: CallParams<AidchainContractsArgs['obj']['get_campaign_count()uint64'] | AidchainContractsArgs['tuple']['get_campaign_count()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getCampaignCount(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_campaign_count()uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_organization_count()uint64` ABI method.
     *
     * Get total number of organizations registered
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOrganizationCount: async (params: CallParams<AidchainContractsArgs['obj']['get_organization_count()uint64'] | AidchainContractsArgs['tuple']['get_organization_count()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getOrganizationCount(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_organization_count()uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_donation(uint64)string` ABI method.
     *
     * Create a donation record (for testing without payment)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createDonation: async (params: CallParams<AidchainContractsArgs['obj']['create_donation(uint64)string'] | AidchainContractsArgs['tuple']['create_donation(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.createDonation(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['create_donation(uint64)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_total_donations()uint64` ABI method.
     *
     * Get total amount of donations across all campaigns
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalDonations: async (params: CallParams<AidchainContractsArgs['obj']['get_total_donations()uint64'] | AidchainContractsArgs['tuple']['get_total_donations()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getTotalDonations(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_total_donations()uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `calculate_total(uint64,uint64)uint64` ABI method.
     *
     * Calculate total of two amounts
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateTotal: async (params: CallParams<AidchainContractsArgs['obj']['calculate_total(uint64,uint64)uint64'] | AidchainContractsArgs['tuple']['calculate_total(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.calculateTotal(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['calculate_total(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `validate_donation(uint64,string)string` ABI method.
     *
     * Validate donation parameters
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    validateDonation: async (params: CallParams<AidchainContractsArgs['obj']['validate_donation(uint64,string)string'] | AidchainContractsArgs['tuple']['validate_donation(uint64,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.validateDonation(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['validate_donation(uint64,string)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `log_delivery(string,string)uint64` ABI method.
     *
     * Log a delivery event
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    logDelivery: async (params: CallParams<AidchainContractsArgs['obj']['log_delivery(string,string)uint64'] | AidchainContractsArgs['tuple']['log_delivery(string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.logDelivery(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['log_delivery(string,string)uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `verify_delivery(uint64,string)string` ABI method.
     *
     * Verify a delivery by an authorized agent
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyDelivery: async (params: CallParams<AidchainContractsArgs['obj']['verify_delivery(uint64,string)string'] | AidchainContractsArgs['tuple']['verify_delivery(uint64,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.verifyDelivery(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['verify_delivery(uint64,string)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_contract_stats()string` ABI method.
     *
     * Get overall contract statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<AidchainContractsArgs['obj']['get_contract_stats()string'] | AidchainContractsArgs['tuple']['get_contract_stats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_contract_stats()string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_voucher_asset(string,uint64)uint64` ABI method.
     *
     * Create a REAL ASA token on the blockchain for aid distribution
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createVoucherAsset: async (params: CallParams<AidchainContractsArgs['obj']['create_voucher_asset(string,uint64)uint64'] | AidchainContractsArgs['tuple']['create_voucher_asset(string,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.createVoucherAsset(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['create_voucher_asset(string,uint64)uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `distribute_vouchers(uint64,string,uint64)string` ABI method.
     *
     * REAL blockchain token transfer to recipient
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeVouchers: async (params: CallParams<AidchainContractsArgs['obj']['distribute_vouchers(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['distribute_vouchers(uint64,string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.distributeVouchers(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['distribute_vouchers(uint64,string,uint64)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `redeem_voucher(uint64,string,uint64)string` ABI method.
     *
     * Redeem voucher tokens at an approved merchant
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    redeemVoucher: async (params: CallParams<AidchainContractsArgs['obj']['redeem_voucher(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['redeem_voucher(uint64,string,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.redeemVoucher(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['redeem_voucher(uint64,string,uint64)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_stats()string` ABI method.
     *
     * Get voucher system statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVoucherStats: async (params: CallParams<AidchainContractsArgs['obj']['get_voucher_stats()string'] | AidchainContractsArgs['tuple']['get_voucher_stats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getVoucherStats(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_voucher_stats()string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `create_milestone(uint64,uint64,string)uint64` ABI method.
     *
     * Create a new milestone for campaign funding
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createMilestone: async (params: CallParams<AidchainContractsArgs['obj']['create_milestone(uint64,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_milestone(uint64,uint64,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.createMilestone(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['create_milestone(uint64,uint64,string)uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `complete_milestone(uint64,string)string` ABI method.
     *
     * Mark milestone as completed with proof
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    completeMilestone: async (params: CallParams<AidchainContractsArgs['obj']['complete_milestone(uint64,string)string'] | AidchainContractsArgs['tuple']['complete_milestone(uint64,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.completeMilestone(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['complete_milestone(uint64,string)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `release_milestone_funds(uint64,account,uint64)string` ABI method.
     *
     * Release REAL funds for completed milestone via blockchain payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    releaseMilestoneFunds: async (params: CallParams<AidchainContractsArgs['obj']['release_milestone_funds(uint64,account,uint64)string'] | AidchainContractsArgs['tuple']['release_milestone_funds(uint64,account,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.releaseMilestoneFunds(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['release_milestone_funds(uint64,account,uint64)string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_stats()string` ABI method.
     *
     * Get milestone system statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMilestoneStats: async (params: CallParams<AidchainContractsArgs['obj']['get_milestone_stats()string'] | AidchainContractsArgs['tuple']['get_milestone_stats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getMilestoneStats(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_milestone_stats()string'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a campaign
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCampaignDetails: async (params: CallParams<AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getCampaignDetails(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_organization_details(uint64)(uint64,string,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about an organization
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOrganizationDetails: async (params: CallParams<AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getOrganizationDetails(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_organization_details(uint64)(uint64,string,string,uint64)'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a voucher
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVoucherDetails: async (params: CallParams<AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getVoucherDetails(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a milestone
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMilestoneDetails: async (params: CallParams<AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getMilestoneDetails(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_delivery_details(uint64)(uint64,string,string,string,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get detailed information about a delivery
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getDeliveryDetails: async (params: CallParams<AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getDeliveryDetails(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_delivery_details(uint64)(uint64,string,string,string,uint64)'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_milestone_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of milestones created
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMilestoneCount: async (params: CallParams<AidchainContractsArgs['obj']['get_milestone_count()uint64'] | AidchainContractsArgs['tuple']['get_milestone_count()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getMilestoneCount(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_milestone_count()uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_voucher_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of vouchers created
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVoucherCount: async (params: CallParams<AidchainContractsArgs['obj']['get_voucher_count()uint64'] | AidchainContractsArgs['tuple']['get_voucher_count()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getVoucherCount(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_voucher_count()uint64'])}
    },

    /**
     * Makes a call to the AidchainContracts smart contract using the `get_delivery_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of deliveries logged
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getDeliveryCount: async (params: CallParams<AidchainContractsArgs['obj']['get_delivery_count()uint64'] | AidchainContractsArgs['tuple']['get_delivery_count()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AidchainContractsParamsFactory.getDeliveryCount(params))
      return {...result, return: result.return as unknown as (undefined | AidchainContractsReturns['get_delivery_count()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AidchainContractsClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get detailed information about a campaign
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCampaignDetails(params: CallParams<AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']>) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getCampaignDetails(params))
    return result.return as unknown as AidchainContractsReturns['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_organization_details(uint64)(uint64,string,string,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get detailed information about an organization
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getOrganizationDetails(params: CallParams<AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']>) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getOrganizationDetails(params))
    return result.return as unknown as AidchainContractsReturns['get_organization_details(uint64)(uint64,string,string,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get detailed information about a voucher
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getVoucherDetails(params: CallParams<AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']>) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getVoucherDetails(params))
    return result.return as unknown as AidchainContractsReturns['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get detailed information about a milestone
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMilestoneDetails(params: CallParams<AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']>) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getMilestoneDetails(params))
    return result.return as unknown as AidchainContractsReturns['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_delivery_details(uint64)(uint64,string,string,string,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get detailed information about a delivery
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getDeliveryDetails(params: CallParams<AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']>) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getDeliveryDetails(params))
    return result.return as unknown as AidchainContractsReturns['get_delivery_details(uint64)(uint64,string,string,string,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_milestone_count()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get total number of milestones created
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMilestoneCount(params: CallParams<AidchainContractsArgs['obj']['get_milestone_count()uint64'] | AidchainContractsArgs['tuple']['get_milestone_count()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getMilestoneCount(params))
    return result.return as unknown as AidchainContractsReturns['get_milestone_count()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_voucher_count()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get total number of vouchers created
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getVoucherCount(params: CallParams<AidchainContractsArgs['obj']['get_voucher_count()uint64'] | AidchainContractsArgs['tuple']['get_voucher_count()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getVoucherCount(params))
    return result.return as unknown as AidchainContractsReturns['get_voucher_count()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AidchainContracts smart contract using the `get_delivery_count()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get total number of deliveries logged
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getDeliveryCount(params: CallParams<AidchainContractsArgs['obj']['get_delivery_count()uint64'] | AidchainContractsArgs['tuple']['get_delivery_count()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AidchainContractsParamsFactory.getDeliveryCount(params))
    return result.return as unknown as AidchainContractsReturns['get_delivery_count()uint64']
  }

  /**
   * Methods to access state for the current AidchainContracts app
   */
  state = {
    /**
     * Methods to access global state for the current AidchainContracts app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          campaignCounter: result.campaign_counter,
          organizationCounter: result.organization_counter,
          deliveryCounter: result.delivery_counter,
          voucherCounter: result.voucher_counter,
          milestoneCounter: result.milestone_counter,
          totalDonations: result.total_donations,
          totalOrganizations: result.total_organizations,
          totalVouchersIssued: result.total_vouchers_issued,
          totalMilestonesCompleted: result.total_milestones_completed,
        }
      },
      /**
       * Get the current value of the campaign_counter key in global state
       */
      campaignCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("campaign_counter")) as bigint | undefined },
      /**
       * Get the current value of the organization_counter key in global state
       */
      organizationCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("organization_counter")) as bigint | undefined },
      /**
       * Get the current value of the delivery_counter key in global state
       */
      deliveryCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("delivery_counter")) as bigint | undefined },
      /**
       * Get the current value of the voucher_counter key in global state
       */
      voucherCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voucher_counter")) as bigint | undefined },
      /**
       * Get the current value of the milestone_counter key in global state
       */
      milestoneCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("milestone_counter")) as bigint | undefined },
      /**
       * Get the current value of the total_donations key in global state
       */
      totalDonations: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_donations")) as bigint | undefined },
      /**
       * Get the current value of the total_organizations key in global state
       */
      totalOrganizations: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_organizations")) as bigint | undefined },
      /**
       * Get the current value of the total_vouchers_issued key in global state
       */
      totalVouchersIssued: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_vouchers_issued")) as bigint | undefined },
      /**
       * Get the current value of the total_milestones_completed key in global state
       */
      totalMilestonesCompleted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_milestones_completed")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current AidchainContracts app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the campaigns map in box state
       */
      campaigns: {
        /**
         * Get all current values of the campaigns map in box state
         */
        getMap: async (): Promise<Map<bigint, CampaignInfo>> => { return (await this.appClient.state.box.getMap("campaigns")) as Map<bigint, CampaignInfo> },
        /**
         * Get a current value of the campaigns map by key from box state
         */
        value: async (key: bigint | number): Promise<CampaignInfo | undefined> => { return await this.appClient.state.box.getMapValue("campaigns", key) as CampaignInfo | undefined },
      },
      /**
       * Get values from the organizations map in box state
       */
      organizations: {
        /**
         * Get all current values of the organizations map in box state
         */
        getMap: async (): Promise<Map<bigint, OrganizationInfo>> => { return (await this.appClient.state.box.getMap("organizations")) as Map<bigint, OrganizationInfo> },
        /**
         * Get a current value of the organizations map by key from box state
         */
        value: async (key: bigint | number): Promise<OrganizationInfo | undefined> => { return await this.appClient.state.box.getMapValue("organizations", key) as OrganizationInfo | undefined },
      },
      /**
       * Get values from the milestones map in box state
       */
      milestones: {
        /**
         * Get all current values of the milestones map in box state
         */
        getMap: async (): Promise<Map<bigint, MilestoneInfo>> => { return (await this.appClient.state.box.getMap("milestones")) as Map<bigint, MilestoneInfo> },
        /**
         * Get a current value of the milestones map by key from box state
         */
        value: async (key: bigint | number): Promise<MilestoneInfo | undefined> => { return await this.appClient.state.box.getMapValue("milestones", key) as MilestoneInfo | undefined },
      },
      /**
       * Get values from the deliveries map in box state
       */
      deliveries: {
        /**
         * Get all current values of the deliveries map in box state
         */
        getMap: async (): Promise<Map<bigint, DeliveryRecord>> => { return (await this.appClient.state.box.getMap("deliveries")) as Map<bigint, DeliveryRecord> },
        /**
         * Get a current value of the deliveries map by key from box state
         */
        value: async (key: bigint | number): Promise<DeliveryRecord | undefined> => { return await this.appClient.state.box.getMapValue("deliveries", key) as DeliveryRecord | undefined },
      },
      /**
       * Get values from the vouchers map in box state
       */
      vouchers: {
        /**
         * Get all current values of the vouchers map in box state
         */
        getMap: async (): Promise<Map<bigint, VoucherInfo>> => { return (await this.appClient.state.box.getMap("vouchers")) as Map<bigint, VoucherInfo> },
        /**
         * Get a current value of the vouchers map by key from box state
         */
        value: async (key: bigint | number): Promise<VoucherInfo | undefined> => { return await this.appClient.state.box.getMapValue("vouchers", key) as VoucherInfo | undefined },
      },
    },
  }

  public newGroup(): AidchainContractsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the AidchainContracts contract
       */
      hello(params: CallParams<AidchainContractsArgs['obj']['hello(string)string'] | AidchainContractsArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a initialize()string method call against the AidchainContracts contract
       */
      initialize(params: CallParams<AidchainContractsArgs['obj']['initialize()string'] | AidchainContractsArgs['tuple']['initialize()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push((v) => client.decodeReturnValue('initialize()string', v))
        return this
      },
      /**
       * Add a register_organization(string,string)uint64 method call against the AidchainContracts contract
       */
      registerOrganization(params: CallParams<AidchainContractsArgs['obj']['register_organization(string,string)uint64'] | AidchainContractsArgs['tuple']['register_organization(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerOrganization(params)))
        resultMappers.push((v) => client.decodeReturnValue('register_organization(string,string)uint64', v))
        return this
      },
      /**
       * Add a create_campaign(string,uint64,string)uint64 method call against the AidchainContracts contract
       */
      createCampaign(params: CallParams<AidchainContractsArgs['obj']['create_campaign(string,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_campaign(string,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createCampaign(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_campaign(string,uint64,string)uint64', v))
        return this
      },
      /**
       * Add a get_campaign_count()uint64 method call against the AidchainContracts contract
       */
      getCampaignCount(params: CallParams<AidchainContractsArgs['obj']['get_campaign_count()uint64'] | AidchainContractsArgs['tuple']['get_campaign_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCampaignCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_campaign_count()uint64', v))
        return this
      },
      /**
       * Add a get_organization_count()uint64 method call against the AidchainContracts contract
       */
      getOrganizationCount(params: CallParams<AidchainContractsArgs['obj']['get_organization_count()uint64'] | AidchainContractsArgs['tuple']['get_organization_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOrganizationCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_organization_count()uint64', v))
        return this
      },
      /**
       * Add a create_donation(uint64)string method call against the AidchainContracts contract
       */
      createDonation(params: CallParams<AidchainContractsArgs['obj']['create_donation(uint64)string'] | AidchainContractsArgs['tuple']['create_donation(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createDonation(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_donation(uint64)string', v))
        return this
      },
      /**
       * Add a get_total_donations()uint64 method call against the AidchainContracts contract
       */
      getTotalDonations(params: CallParams<AidchainContractsArgs['obj']['get_total_donations()uint64'] | AidchainContractsArgs['tuple']['get_total_donations()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalDonations(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_donations()uint64', v))
        return this
      },
      /**
       * Add a calculate_total(uint64,uint64)uint64 method call against the AidchainContracts contract
       */
      calculateTotal(params: CallParams<AidchainContractsArgs['obj']['calculate_total(uint64,uint64)uint64'] | AidchainContractsArgs['tuple']['calculate_total(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateTotal(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_total(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a validate_donation(uint64,string)string method call against the AidchainContracts contract
       */
      validateDonation(params: CallParams<AidchainContractsArgs['obj']['validate_donation(uint64,string)string'] | AidchainContractsArgs['tuple']['validate_donation(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.validateDonation(params)))
        resultMappers.push((v) => client.decodeReturnValue('validate_donation(uint64,string)string', v))
        return this
      },
      /**
       * Add a log_delivery(string,string)uint64 method call against the AidchainContracts contract
       */
      logDelivery(params: CallParams<AidchainContractsArgs['obj']['log_delivery(string,string)uint64'] | AidchainContractsArgs['tuple']['log_delivery(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.logDelivery(params)))
        resultMappers.push((v) => client.decodeReturnValue('log_delivery(string,string)uint64', v))
        return this
      },
      /**
       * Add a verify_delivery(uint64,string)string method call against the AidchainContracts contract
       */
      verifyDelivery(params: CallParams<AidchainContractsArgs['obj']['verify_delivery(uint64,string)string'] | AidchainContractsArgs['tuple']['verify_delivery(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyDelivery(params)))
        resultMappers.push((v) => client.decodeReturnValue('verify_delivery(uint64,string)string', v))
        return this
      },
      /**
       * Add a get_contract_stats()string method call against the AidchainContracts contract
       */
      getContractStats(params: CallParams<AidchainContractsArgs['obj']['get_contract_stats()string'] | AidchainContractsArgs['tuple']['get_contract_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_contract_stats()string', v))
        return this
      },
      /**
       * Add a create_voucher_asset(string,uint64)uint64 method call against the AidchainContracts contract
       */
      createVoucherAsset(params: CallParams<AidchainContractsArgs['obj']['create_voucher_asset(string,uint64)uint64'] | AidchainContractsArgs['tuple']['create_voucher_asset(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createVoucherAsset(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_voucher_asset(string,uint64)uint64', v))
        return this
      },
      /**
       * Add a distribute_vouchers(uint64,string,uint64)string method call against the AidchainContracts contract
       */
      distributeVouchers(params: CallParams<AidchainContractsArgs['obj']['distribute_vouchers(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['distribute_vouchers(uint64,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeVouchers(params)))
        resultMappers.push((v) => client.decodeReturnValue('distribute_vouchers(uint64,string,uint64)string', v))
        return this
      },
      /**
       * Add a redeem_voucher(uint64,string,uint64)string method call against the AidchainContracts contract
       */
      redeemVoucher(params: CallParams<AidchainContractsArgs['obj']['redeem_voucher(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['redeem_voucher(uint64,string,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.redeemVoucher(params)))
        resultMappers.push((v) => client.decodeReturnValue('redeem_voucher(uint64,string,uint64)string', v))
        return this
      },
      /**
       * Add a get_voucher_stats()string method call against the AidchainContracts contract
       */
      getVoucherStats(params: CallParams<AidchainContractsArgs['obj']['get_voucher_stats()string'] | AidchainContractsArgs['tuple']['get_voucher_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVoucherStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_voucher_stats()string', v))
        return this
      },
      /**
       * Add a create_milestone(uint64,uint64,string)uint64 method call against the AidchainContracts contract
       */
      createMilestone(params: CallParams<AidchainContractsArgs['obj']['create_milestone(uint64,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_milestone(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createMilestone(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_milestone(uint64,uint64,string)uint64', v))
        return this
      },
      /**
       * Add a complete_milestone(uint64,string)string method call against the AidchainContracts contract
       */
      completeMilestone(params: CallParams<AidchainContractsArgs['obj']['complete_milestone(uint64,string)string'] | AidchainContractsArgs['tuple']['complete_milestone(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.completeMilestone(params)))
        resultMappers.push((v) => client.decodeReturnValue('complete_milestone(uint64,string)string', v))
        return this
      },
      /**
       * Add a release_milestone_funds(uint64,account,uint64)string method call against the AidchainContracts contract
       */
      releaseMilestoneFunds(params: CallParams<AidchainContractsArgs['obj']['release_milestone_funds(uint64,account,uint64)string'] | AidchainContractsArgs['tuple']['release_milestone_funds(uint64,account,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.releaseMilestoneFunds(params)))
        resultMappers.push((v) => client.decodeReturnValue('release_milestone_funds(uint64,account,uint64)string', v))
        return this
      },
      /**
       * Add a get_milestone_stats()string method call against the AidchainContracts contract
       */
      getMilestoneStats(params: CallParams<AidchainContractsArgs['obj']['get_milestone_stats()string'] | AidchainContractsArgs['tuple']['get_milestone_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMilestoneStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_milestone_stats()string', v))
        return this
      },
      /**
       * Add a get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64) method call against the AidchainContracts contract
       */
      getCampaignDetails(params: CallParams<AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCampaignDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)', v))
        return this
      },
      /**
       * Add a get_organization_details(uint64)(uint64,string,string,uint64) method call against the AidchainContracts contract
       */
      getOrganizationDetails(params: CallParams<AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOrganizationDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_organization_details(uint64)(uint64,string,string,uint64)', v))
        return this
      },
      /**
       * Add a get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64) method call against the AidchainContracts contract
       */
      getVoucherDetails(params: CallParams<AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVoucherDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64) method call against the AidchainContracts contract
       */
      getMilestoneDetails(params: CallParams<AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMilestoneDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_delivery_details(uint64)(uint64,string,string,string,uint64) method call against the AidchainContracts contract
       */
      getDeliveryDetails(params: CallParams<AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDeliveryDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_delivery_details(uint64)(uint64,string,string,string,uint64)', v))
        return this
      },
      /**
       * Add a get_milestone_count()uint64 method call against the AidchainContracts contract
       */
      getMilestoneCount(params: CallParams<AidchainContractsArgs['obj']['get_milestone_count()uint64'] | AidchainContractsArgs['tuple']['get_milestone_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMilestoneCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_milestone_count()uint64', v))
        return this
      },
      /**
       * Add a get_voucher_count()uint64 method call against the AidchainContracts contract
       */
      getVoucherCount(params: CallParams<AidchainContractsArgs['obj']['get_voucher_count()uint64'] | AidchainContractsArgs['tuple']['get_voucher_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVoucherCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_voucher_count()uint64', v))
        return this
      },
      /**
       * Add a get_delivery_count()uint64 method call against the AidchainContracts contract
       */
      getDeliveryCount(params: CallParams<AidchainContractsArgs['obj']['get_delivery_count()uint64'] | AidchainContractsArgs['tuple']['get_delivery_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDeliveryCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_delivery_count()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the AidchainContracts contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AidchainContractsComposer
  }
}
export type AidchainContractsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<AidchainContractsArgs['obj']['hello(string)string'] | AidchainContractsArgs['tuple']['hello(string)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['hello(string)string'] | undefined]>

  /**
   * Calls the initialize()string ABI method.
   *
   * Initialize the contract with default values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<AidchainContractsArgs['obj']['initialize()string'] | AidchainContractsArgs['tuple']['initialize()string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['initialize()string'] | undefined]>

  /**
   * Calls the register_organization(string,string)uint64 ABI method.
   *
   * Register a new organization in the system with proper data storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOrganization(params?: CallParams<AidchainContractsArgs['obj']['register_organization(string,string)uint64'] | AidchainContractsArgs['tuple']['register_organization(string,string)uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['register_organization(string,string)uint64'] | undefined]>

  /**
   * Calls the create_campaign(string,uint64,string)uint64 ABI method.
   *
   * Create a new donation campaign with proper data storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createCampaign(params?: CallParams<AidchainContractsArgs['obj']['create_campaign(string,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_campaign(string,uint64,string)uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['create_campaign(string,uint64,string)uint64'] | undefined]>

  /**
   * Calls the get_campaign_count()uint64 ABI method.
   *
   * Get total number of campaigns created
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCampaignCount(params?: CallParams<AidchainContractsArgs['obj']['get_campaign_count()uint64'] | AidchainContractsArgs['tuple']['get_campaign_count()uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_campaign_count()uint64'] | undefined]>

  /**
   * Calls the get_organization_count()uint64 ABI method.
   *
   * Get total number of organizations registered
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrganizationCount(params?: CallParams<AidchainContractsArgs['obj']['get_organization_count()uint64'] | AidchainContractsArgs['tuple']['get_organization_count()uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_organization_count()uint64'] | undefined]>

  /**
   * Calls the create_donation(uint64)string ABI method.
   *
   * Create a donation record (for testing without payment)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDonation(params?: CallParams<AidchainContractsArgs['obj']['create_donation(uint64)string'] | AidchainContractsArgs['tuple']['create_donation(uint64)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['create_donation(uint64)string'] | undefined]>

  /**
   * Calls the get_total_donations()uint64 ABI method.
   *
   * Get total amount of donations across all campaigns
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalDonations(params?: CallParams<AidchainContractsArgs['obj']['get_total_donations()uint64'] | AidchainContractsArgs['tuple']['get_total_donations()uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_total_donations()uint64'] | undefined]>

  /**
   * Calls the calculate_total(uint64,uint64)uint64 ABI method.
   *
   * Calculate total of two amounts
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateTotal(params?: CallParams<AidchainContractsArgs['obj']['calculate_total(uint64,uint64)uint64'] | AidchainContractsArgs['tuple']['calculate_total(uint64,uint64)uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['calculate_total(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the validate_donation(uint64,string)string ABI method.
   *
   * Validate donation parameters
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  validateDonation(params?: CallParams<AidchainContractsArgs['obj']['validate_donation(uint64,string)string'] | AidchainContractsArgs['tuple']['validate_donation(uint64,string)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['validate_donation(uint64,string)string'] | undefined]>

  /**
   * Calls the log_delivery(string,string)uint64 ABI method.
   *
   * Log a delivery event
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  logDelivery(params?: CallParams<AidchainContractsArgs['obj']['log_delivery(string,string)uint64'] | AidchainContractsArgs['tuple']['log_delivery(string,string)uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['log_delivery(string,string)uint64'] | undefined]>

  /**
   * Calls the verify_delivery(uint64,string)string ABI method.
   *
   * Verify a delivery by an authorized agent
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyDelivery(params?: CallParams<AidchainContractsArgs['obj']['verify_delivery(uint64,string)string'] | AidchainContractsArgs['tuple']['verify_delivery(uint64,string)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['verify_delivery(uint64,string)string'] | undefined]>

  /**
   * Calls the get_contract_stats()string ABI method.
   *
   * Get overall contract statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<AidchainContractsArgs['obj']['get_contract_stats()string'] | AidchainContractsArgs['tuple']['get_contract_stats()string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_contract_stats()string'] | undefined]>

  /**
   * Calls the create_voucher_asset(string,uint64)uint64 ABI method.
   *
   * Create a REAL ASA token on the blockchain for aid distribution
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createVoucherAsset(params?: CallParams<AidchainContractsArgs['obj']['create_voucher_asset(string,uint64)uint64'] | AidchainContractsArgs['tuple']['create_voucher_asset(string,uint64)uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['create_voucher_asset(string,uint64)uint64'] | undefined]>

  /**
   * Calls the distribute_vouchers(uint64,string,uint64)string ABI method.
   *
   * REAL blockchain token transfer to recipient
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeVouchers(params?: CallParams<AidchainContractsArgs['obj']['distribute_vouchers(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['distribute_vouchers(uint64,string,uint64)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['distribute_vouchers(uint64,string,uint64)string'] | undefined]>

  /**
   * Calls the redeem_voucher(uint64,string,uint64)string ABI method.
   *
   * Redeem voucher tokens at an approved merchant
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  redeemVoucher(params?: CallParams<AidchainContractsArgs['obj']['redeem_voucher(uint64,string,uint64)string'] | AidchainContractsArgs['tuple']['redeem_voucher(uint64,string,uint64)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['redeem_voucher(uint64,string,uint64)string'] | undefined]>

  /**
   * Calls the get_voucher_stats()string ABI method.
   *
   * Get voucher system statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoucherStats(params?: CallParams<AidchainContractsArgs['obj']['get_voucher_stats()string'] | AidchainContractsArgs['tuple']['get_voucher_stats()string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_voucher_stats()string'] | undefined]>

  /**
   * Calls the create_milestone(uint64,uint64,string)uint64 ABI method.
   *
   * Create a new milestone for campaign funding
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createMilestone(params?: CallParams<AidchainContractsArgs['obj']['create_milestone(uint64,uint64,string)uint64'] | AidchainContractsArgs['tuple']['create_milestone(uint64,uint64,string)uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['create_milestone(uint64,uint64,string)uint64'] | undefined]>

  /**
   * Calls the complete_milestone(uint64,string)string ABI method.
   *
   * Mark milestone as completed with proof
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeMilestone(params?: CallParams<AidchainContractsArgs['obj']['complete_milestone(uint64,string)string'] | AidchainContractsArgs['tuple']['complete_milestone(uint64,string)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['complete_milestone(uint64,string)string'] | undefined]>

  /**
   * Calls the release_milestone_funds(uint64,account,uint64)string ABI method.
   *
   * Release REAL funds for completed milestone via blockchain payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  releaseMilestoneFunds(params?: CallParams<AidchainContractsArgs['obj']['release_milestone_funds(uint64,account,uint64)string'] | AidchainContractsArgs['tuple']['release_milestone_funds(uint64,account,uint64)string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['release_milestone_funds(uint64,account,uint64)string'] | undefined]>

  /**
   * Calls the get_milestone_stats()string ABI method.
   *
   * Get milestone system statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMilestoneStats(params?: CallParams<AidchainContractsArgs['obj']['get_milestone_stats()string'] | AidchainContractsArgs['tuple']['get_milestone_stats()string']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_milestone_stats()string'] | undefined]>

  /**
   * Calls the get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64) ABI method.
   *
   * Get detailed information about a campaign
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCampaignDetails(params?: CallParams<AidchainContractsArgs['obj']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | AidchainContractsArgs['tuple']['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)'] | undefined]>

  /**
   * Calls the get_organization_details(uint64)(uint64,string,string,uint64) ABI method.
   *
   * Get detailed information about an organization
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrganizationDetails(params?: CallParams<AidchainContractsArgs['obj']['get_organization_details(uint64)(uint64,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_organization_details(uint64)(uint64,string,string,uint64)']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_organization_details(uint64)(uint64,string,string,uint64)'] | undefined]>

  /**
   * Calls the get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64) ABI method.
   *
   * Get detailed information about a voucher
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoucherDetails(params?: CallParams<AidchainContractsArgs['obj']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64) ABI method.
   *
   * Get detailed information about a milestone
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMilestoneDetails(params?: CallParams<AidchainContractsArgs['obj']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | AidchainContractsArgs['tuple']['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_delivery_details(uint64)(uint64,string,string,string,uint64) ABI method.
   *
   * Get detailed information about a delivery
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDeliveryDetails(params?: CallParams<AidchainContractsArgs['obj']['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | AidchainContractsArgs['tuple']['get_delivery_details(uint64)(uint64,string,string,string,uint64)']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_delivery_details(uint64)(uint64,string,string,string,uint64)'] | undefined]>

  /**
   * Calls the get_milestone_count()uint64 ABI method.
   *
   * Get total number of milestones created
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMilestoneCount(params?: CallParams<AidchainContractsArgs['obj']['get_milestone_count()uint64'] | AidchainContractsArgs['tuple']['get_milestone_count()uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_milestone_count()uint64'] | undefined]>

  /**
   * Calls the get_voucher_count()uint64 ABI method.
   *
   * Get total number of vouchers created
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoucherCount(params?: CallParams<AidchainContractsArgs['obj']['get_voucher_count()uint64'] | AidchainContractsArgs['tuple']['get_voucher_count()uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_voucher_count()uint64'] | undefined]>

  /**
   * Calls the get_delivery_count()uint64 ABI method.
   *
   * Get total number of deliveries logged
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDeliveryCount(params?: CallParams<AidchainContractsArgs['obj']['get_delivery_count()uint64'] | AidchainContractsArgs['tuple']['get_delivery_count()uint64']>): AidchainContractsComposer<[...TReturns, AidchainContractsReturns['get_delivery_count()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AidchainContracts smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AidchainContractsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AidchainContractsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AidchainContractsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AidchainContractsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AidchainContractsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AidchainContractsComposerResults<TReturns>>
}
export type AidchainContractsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

