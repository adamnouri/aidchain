{
    "name": "AidchainContracts",
    "structs": {
        "CampaignInfo": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "title",
                "type": "string"
            },
            {
                "name": "target",
                "type": "uint64"
            },
            {
                "name": "raised",
                "type": "uint64"
            },
            {
                "name": "creator",
                "type": "string"
            },
            {
                "name": "active",
                "type": "uint64"
            }
        ],
        "DeliveryRecord": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "recipient",
                "type": "string"
            },
            {
                "name": "location",
                "type": "string"
            },
            {
                "name": "agent",
                "type": "string"
            },
            {
                "name": "verified",
                "type": "uint64"
            }
        ],
        "MilestoneInfo": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "campaign_id",
                "type": "uint64"
            },
            {
                "name": "target_amount",
                "type": "uint64"
            },
            {
                "name": "description",
                "type": "string"
            },
            {
                "name": "completed",
                "type": "uint64"
            },
            {
                "name": "funds_released",
                "type": "uint64"
            }
        ],
        "OrganizationInfo": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "wallet_address",
                "type": "string"
            },
            {
                "name": "verification_level",
                "type": "uint64"
            }
        ],
        "VoucherInfo": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "asset_id",
                "type": "uint64"
            },
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "total_supply",
                "type": "uint64"
            },
            {
                "name": "issued",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "hello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initialize",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize the contract with default values",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register_organization",
            "args": [
                {
                    "type": "string",
                    "name": "org_name"
                },
                {
                    "type": "string",
                    "name": "wallet_address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Register a new organization in the system with proper data storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_campaign",
            "args": [
                {
                    "type": "string",
                    "name": "title"
                },
                {
                    "type": "uint64",
                    "name": "target"
                },
                {
                    "type": "string",
                    "name": "creator"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new donation campaign with proper data storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_campaign_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total number of campaigns created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_organization_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total number of organizations registered",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_donation",
            "args": [
                {
                    "type": "uint64",
                    "name": "campaign_id"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a donation record (for testing without payment)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_donations",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total amount of donations across all campaigns",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_total",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount1"
                },
                {
                    "type": "uint64",
                    "name": "amount2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate total of two amounts",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_donation",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "string",
                    "name": "donor"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Validate donation parameters",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log_delivery",
            "args": [
                {
                    "type": "string",
                    "name": "recipient"
                },
                {
                    "type": "string",
                    "name": "location"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Log a delivery event",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_delivery",
            "args": [
                {
                    "type": "uint64",
                    "name": "delivery_id"
                },
                {
                    "type": "string",
                    "name": "agent"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Verify a delivery by an authorized agent",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_contract_stats",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get overall contract statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_voucher_asset",
            "args": [
                {
                    "type": "string",
                    "name": "asset_name"
                },
                {
                    "type": "uint64",
                    "name": "total_supply"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a REAL ASA token on the blockchain for aid distribution",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "distribute_vouchers",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id"
                },
                {
                    "type": "string",
                    "name": "recipient"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "REAL blockchain token transfer to recipient",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "redeem_voucher",
            "args": [
                {
                    "type": "uint64",
                    "name": "voucher_id"
                },
                {
                    "type": "string",
                    "name": "merchant"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Redeem voucher tokens at an approved merchant",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_voucher_stats",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get voucher system statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_milestone",
            "args": [
                {
                    "type": "uint64",
                    "name": "campaign_id"
                },
                {
                    "type": "uint64",
                    "name": "target_amount"
                },
                {
                    "type": "string",
                    "name": "description"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new milestone for campaign funding",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "complete_milestone",
            "args": [
                {
                    "type": "uint64",
                    "name": "milestone_id"
                },
                {
                    "type": "string",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mark milestone as completed with proof",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "release_milestone_funds",
            "args": [
                {
                    "type": "uint64",
                    "name": "milestone_id"
                },
                {
                    "type": "account",
                    "name": "recipient"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Release REAL funds for completed milestone via blockchain payment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_milestone_stats",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get milestone system statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_campaign_details",
            "args": [
                {
                    "type": "uint64",
                    "name": "campaign_id"
                }
            ],
            "returns": {
                "type": "(uint64,string,uint64,uint64,string,uint64)",
                "struct": "CampaignInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get detailed information about a campaign",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_organization_details",
            "args": [
                {
                    "type": "uint64",
                    "name": "org_id"
                }
            ],
            "returns": {
                "type": "(uint64,string,string,uint64)",
                "struct": "OrganizationInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get detailed information about an organization",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_voucher_details",
            "args": [
                {
                    "type": "uint64",
                    "name": "voucher_id"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,string,uint64,uint64)",
                "struct": "VoucherInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get detailed information about a voucher",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_milestone_details",
            "args": [
                {
                    "type": "uint64",
                    "name": "milestone_id"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,string,uint64,uint64)",
                "struct": "MilestoneInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get detailed information about a milestone",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_delivery_details",
            "args": [
                {
                    "type": "uint64",
                    "name": "delivery_id"
                }
            ],
            "returns": {
                "type": "(uint64,string,string,string,uint64)",
                "struct": "DeliveryRecord"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get detailed information about a delivery",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_milestone_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of milestones created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_voucher_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of vouchers created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_delivery_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of deliveries logged",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 9,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "campaign_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2FtcGFpZ25fY291bnRlcg=="
                },
                "organization_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "b3JnYW5pemF0aW9uX2NvdW50ZXI="
                },
                "delivery_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVsaXZlcnlfY291bnRlcg=="
                },
                "voucher_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm91Y2hlcl9jb3VudGVy"
                },
                "milestone_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWlsZXN0b25lX2NvdW50ZXI="
                },
                "total_donations": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfZG9uYXRpb25z"
                },
                "total_organizations": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfb3JnYW5pemF0aW9ucw=="
                },
                "total_vouchers_issued": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfdm91Y2hlcnNfaXNzdWVk"
                },
                "total_milestones_completed": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfbWlsZXN0b25lc19jb21wbGV0ZWQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "campaigns": {
                    "keyType": "uint64",
                    "valueType": "CampaignInfo",
                    "prefix": "Y2FtcGFpZ25z"
                },
                "organizations": {
                    "keyType": "uint64",
                    "valueType": "OrganizationInfo",
                    "prefix": "b3Jncw=="
                },
                "milestones": {
                    "keyType": "uint64",
                    "valueType": "MilestoneInfo",
                    "prefix": "bWlsZXN0b25lcw=="
                },
                "deliveries": {
                    "keyType": "uint64",
                    "valueType": "DeliveryRecord",
                    "prefix": "ZGVsaXZlcmllcw=="
                },
                "vouchers": {
                    "keyType": "uint64",
                    "valueType": "VoucherInfo",
                    "prefix": "dm91Y2hlcnM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        2335
                    ],
                    "errorMessage": "Amount must be greater than zero"
                },
                {
                    "pc": [
                        1614,
                        2162
                    ],
                    "errorMessage": "Campaign ID cannot be zero"
                },
                {
                    "pc": [
                        1611,
                        2159
                    ],
                    "errorMessage": "Campaign ID out of range"
                },
                {
                    "pc": [
                        1625,
                        2174,
                        2410
                    ],
                    "errorMessage": "Campaign not found"
                },
                {
                    "pc": [
                        1852
                    ],
                    "errorMessage": "Delivery ID cannot be zero"
                },
                {
                    "pc": [
                        1849
                    ],
                    "errorMessage": "Delivery ID out of range"
                },
                {
                    "pc": [
                        1864,
                        2474
                    ],
                    "errorMessage": "Delivery not found"
                },
                {
                    "pc": [
                        2245,
                        2332
                    ],
                    "errorMessage": "Milestone ID cannot be zero"
                },
                {
                    "pc": [
                        2242,
                        2329
                    ],
                    "errorMessage": "Milestone ID out of range"
                },
                {
                    "pc": [
                        2257,
                        2458
                    ],
                    "errorMessage": "Milestone not found"
                },
                {
                    "pc": [
                        508,
                        525,
                        542,
                        559,
                        578,
                        597,
                        616,
                        635,
                        654,
                        702,
                        740,
                        774,
                        805,
                        851,
                        889,
                        939,
                        965,
                        1012,
                        1046,
                        1075,
                        1109,
                        1134,
                        1151,
                        1179,
                        1196,
                        1213,
                        1246,
                        1275,
                        1299
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2426
                    ],
                    "errorMessage": "Organization not found"
                },
                {
                    "pc": [
                        2442
                    ],
                    "errorMessage": "Voucher not found"
                },
                {
                    "pc": [
                        1334
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        511,
                        528,
                        545,
                        562,
                        581,
                        600,
                        619,
                        638,
                        657,
                        705,
                        743,
                        777,
                        808,
                        854,
                        892,
                        942,
                        968,
                        1015,
                        1049,
                        1078,
                        1112,
                        1137,
                        1154,
                        1182,
                        1199,
                        1216,
                        1249,
                        1278,
                        1302
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1513,
                        1593,
                        1607,
                        2155
                    ],
                    "errorMessage": "check self.campaign_counter exists"
                },
                {
                    "pc": [
                        2412
                    ],
                    "errorMessage": "check self.campaigns entry exists"
                },
                {
                    "pc": [
                        1867,
                        2476
                    ],
                    "errorMessage": "check self.deliveries entry exists"
                },
                {
                    "pc": [
                        1753,
                        1845,
                        2492
                    ],
                    "errorMessage": "check self.delivery_counter exists"
                },
                {
                    "pc": [
                        2178,
                        2238,
                        2325,
                        2481
                    ],
                    "errorMessage": "check self.milestone_counter exists"
                },
                {
                    "pc": [
                        2260,
                        2460
                    ],
                    "errorMessage": "check self.milestones entry exists"
                },
                {
                    "pc": [
                        1429,
                        1599
                    ],
                    "errorMessage": "check self.organization_counter exists"
                },
                {
                    "pc": [
                        2428
                    ],
                    "errorMessage": "check self.organizations entry exists"
                },
                {
                    "pc": [
                        1630,
                        1676
                    ],
                    "errorMessage": "check self.total_donations exists"
                },
                {
                    "pc": [
                        2274
                    ],
                    "errorMessage": "check self.total_milestones_completed exists"
                },
                {
                    "pc": [
                        1499
                    ],
                    "errorMessage": "check self.total_organizations exists"
                },
                {
                    "pc": [
                        1990,
                        2049,
                        2487
                    ],
                    "errorMessage": "check self.voucher_counter exists"
                },
                {
                    "pc": [
                        2444
                    ],
                    "errorMessage": "check self.vouchers entry exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}