# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "name"}], "name": "hello", "returns": {"type": "string"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "initialize", "returns": {"type": "string"}, "desc": "Initialize the contract with default values", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "org_name"}, {"type": "string", "name": "wallet_address"}], "name": "register_organization", "returns": {"type": "uint64"}, "desc": "Register a new organization in the system with proper data storage", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "title"}, {"type": "uint64", "name": "target"}, {"type": "string", "name": "creator"}], "name": "create_campaign", "returns": {"type": "uint64"}, "desc": "Create a new donation campaign with proper data storage", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_campaign_count", "returns": {"type": "uint64"}, "desc": "Get total number of campaigns created", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_organization_count", "returns": {"type": "uint64"}, "desc": "Get total number of organizations registered", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "campaign_id"}], "name": "create_donation", "returns": {"type": "string"}, "desc": "Create a donation record (for testing without payment)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_total_donations", "returns": {"type": "uint64"}, "desc": "Get total amount of donations across all campaigns", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount1"}, {"type": "uint64", "name": "amount2"}], "name": "calculate_total", "returns": {"type": "uint64"}, "desc": "Calculate total of two amounts", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}, {"type": "string", "name": "donor"}], "name": "validate_donation", "returns": {"type": "string"}, "desc": "Validate donation parameters", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "recipient"}, {"type": "string", "name": "location"}], "name": "log_delivery", "returns": {"type": "uint64"}, "desc": "Log a delivery event", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "delivery_id"}, {"type": "string", "name": "agent"}], "name": "verify_delivery", "returns": {"type": "string"}, "desc": "Verify a delivery by an authorized agent", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_contract_stats", "returns": {"type": "string"}, "desc": "Get overall contract statistics", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "asset_name"}, {"type": "uint64", "name": "total_supply"}], "name": "create_voucher_asset", "returns": {"type": "uint64"}, "desc": "Create a REAL ASA token on the blockchain for aid distribution", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id"}, {"type": "account", "name": "recipient"}, {"type": "uint64", "name": "amount"}], "name": "distribute_vouchers", "returns": {"type": "string"}, "desc": "REAL blockchain token transfer to recipient", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "voucher_id"}, {"type": "string", "name": "merchant"}, {"type": "uint64", "name": "amount"}], "name": "redeem_voucher", "returns": {"type": "string"}, "desc": "Redeem voucher tokens at an approved merchant", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_voucher_stats", "returns": {"type": "string"}, "desc": "Get voucher system statistics", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "campaign_id"}, {"type": "uint64", "name": "target_amount"}, {"type": "string", "name": "description"}], "name": "create_milestone", "returns": {"type": "uint64"}, "desc": "Create a new milestone for campaign funding", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "milestone_id"}, {"type": "string", "name": "proof"}], "name": "complete_milestone", "returns": {"type": "string"}, "desc": "Mark milestone as completed with proof", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "milestone_id"}, {"type": "account", "name": "recipient"}, {"type": "uint64", "name": "amount"}], "name": "release_milestone_funds", "returns": {"type": "string"}, "desc": "Release REAL funds for completed milestone via blockchain payment", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_milestone_stats", "returns": {"type": "string"}, "desc": "Get milestone system statistics", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "campaign_id"}], "name": "get_campaign_details", "returns": {"type": "(uint64,string,uint64,uint64,string,uint64)", "struct": "CampaignInfo"}, "desc": "Get detailed information about a campaign", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "org_id"}], "name": "get_organization_details", "returns": {"type": "(uint64,string,string,uint64)", "struct": "OrganizationInfo"}, "desc": "Get detailed information about an organization", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "voucher_id"}], "name": "get_voucher_details", "returns": {"type": "(uint64,uint64,string,uint64,uint64)", "struct": "VoucherInfo"}, "desc": "Get detailed information about a voucher", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "milestone_id"}], "name": "get_milestone_details", "returns": {"type": "(uint64,uint64,uint64,string,uint64,uint64)", "struct": "MilestoneInfo"}, "desc": "Get detailed information about a milestone", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "delivery_id"}], "name": "get_delivery_details", "returns": {"type": "(uint64,string,string,string,uint64)", "struct": "DeliveryRecord"}, "desc": "Get detailed information about a delivery", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_milestone_count", "returns": {"type": "uint64"}, "desc": "Get total number of milestones created", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_voucher_count", "returns": {"type": "uint64"}, "desc": "Get total number of vouchers created", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_delivery_count", "returns": {"type": "uint64"}, "desc": "Get total number of deliveries logged", "events": [], "readonly": true, "recommendations": {}}], "name": "AidchainContracts", "state": {"keys": {"box": {}, "global": {"campaign_counter": {"key": "Y2FtcGFpZ25fY291bnRlcg==", "keyType": "AVMString", "valueType": "AVMUint64"}, "organization_counter": {"key": "b3JnYW5pemF0aW9uX2NvdW50ZXI=", "keyType": "AVMString", "valueType": "AVMUint64"}, "delivery_counter": {"key": "ZGVsaXZlcnlfY291bnRlcg==", "keyType": "AVMString", "valueType": "AVMUint64"}, "voucher_counter": {"key": "dm91Y2hlcl9jb3VudGVy", "keyType": "AVMString", "valueType": "AVMUint64"}, "milestone_counter": {"key": "bWlsZXN0b25lX2NvdW50ZXI=", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_donations": {"key": "dG90YWxfZG9uYXRpb25z", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_organizations": {"key": "dG90YWxfb3JnYW5pemF0aW9ucw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_vouchers_issued": {"key": "dG90YWxfdm91Y2hlcnNfaXNzdWVk", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_milestones_completed": {"key": "dG90YWxfbWlsZXN0b25lc19jb21wbGV0ZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"campaigns": {"keyType": "uint64", "valueType": "CampaignInfo", "prefix": "Y2FtcGFpZ25z"}, "organizations": {"keyType": "uint64", "valueType": "OrganizationInfo", "prefix": "b3Jncw=="}, "milestones": {"keyType": "uint64", "valueType": "MilestoneInfo", "prefix": "bWlsZXN0b25lcw=="}, "deliveries": {"keyType": "uint64", "valueType": "DeliveryRecord", "prefix": "ZGVsaXZlcmllcw=="}, "vouchers": {"keyType": "uint64", "valueType": "VoucherInfo", "prefix": "dm91Y2hlcnM="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 9}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"CampaignInfo": [{"name": "id", "type": "uint64"}, {"name": "title", "type": "string"}, {"name": "target", "type": "uint64"}, {"name": "raised", "type": "uint64"}, {"name": "creator", "type": "string"}, {"name": "active", "type": "uint64"}], "DeliveryRecord": [{"name": "id", "type": "uint64"}, {"name": "recipient", "type": "string"}, {"name": "location", "type": "string"}, {"name": "agent", "type": "string"}, {"name": "verified", "type": "uint64"}], "MilestoneInfo": [{"name": "id", "type": "uint64"}, {"name": "campaign_id", "type": "uint64"}, {"name": "target_amount", "type": "uint64"}, {"name": "description", "type": "string"}, {"name": "completed", "type": "uint64"}, {"name": "funds_released", "type": "uint64"}], "OrganizationInfo": [{"name": "id", "type": "uint64"}, {"name": "name", "type": "string"}, {"name": "wallet_address", "type": "string"}, {"name": "verification_level", "type": "uint64"}], "VoucherInfo": [{"name": "id", "type": "uint64"}, {"name": "asset_id", "type": "uint64"}, {"name": "name", "type": "string"}, {"name": "total_supply", "type": "uint64"}, {"name": "issued", "type": "uint64"}]}, "byteCode": {"approval": "CiACAAEmEQQVH3x1EGNhbXBhaWduX2NvdW50ZXIPdm91Y2hlcl9jb3VudGVyEW1pbGVzdG9uZV9jb3VudGVyEGRlbGl2ZXJ5X2NvdW50ZXIIAAAAAAAAAAAUb3JnYW5pemF0aW9uX2NvdW50ZXIPdG90YWxfZG9uYXRpb25zE3RvdGFsX29yZ2FuaXphdGlvbnMVdG90YWxfdm91Y2hlcnNfaXNzdWVkGnRvdGFsX21pbGVzdG9uZXNfY29tcGxldGVkCWNhbXBhaWducwgAAAAAAAAAAQpkZWxpdmVyaWVzCHZvdWNoZXJzCm1pbGVzdG9uZXMEb3JnczEYQAAhKSJnJwYiZycEImcqImcrImcnByJnJwgiZycJImcnCiJnMRtBA/2CHQQCvs4RBIl60acEEdOvGQRP5v1WBBPBBbkEFJJSEgT/URVTBJ/WyXgEzboSlwRBX2QeBMidy2sEjqfg+gQVaZABBMhSe78EzEHWeAQhxKBmBPZK4nQEcySFZwSE7q5jBMPemlIEBtQUygRfUt9fBLRPewMEvw7gLQS/VO02BNWyDXAE83z57QS9eQmyBC2JxqE2GgCOHQMNAvUC2AK3AqYClQJ5AmgCTwItAhAB7gG/AaUBfwFZASsBDADqAMQAlACBAG4AWwBIADUAJAATAAIiQzEZFEQxGESICD0WKExQsCNDMRkURDEYRIgIJxYoTFCwI0MxGRREMRhEiAgRFihMULAjQzEZFEQxGEQ2GgGIB+0oTFCwI0MxGRREMRhENhoBiAfKKExQsCNDMRkURDEYRDYaAYgHpyhMULAjQzEZFEQxGEQ2GgGIB4QoTFCwI0MxGRREMRhENhoBiAdhKExQsCNDMRkURDEYRIAkFR98dQAeTWlsZXN0b25lIHN0YXRpc3RpY3MgYXZhaWxhYmxlsCNDMRkURDEYRDYaARc2GgIXwBw2GgMXiAbESRUWVwYCTFAoTFCwI0MxGRREMRhENhoBFzYaAlcCAIgGS0kVFlcGAkxQKExQsCNDMRkURDEYRDYaARc2GgIXNhoDVwIAiAXSFihMULAjQzEZFEQxGESAIhUffHUAHFZvdWNoZXIgc3RhdGlzdGljcyBhdmFpbGFibGWwI0MxGRREMRhENhoBFzYaAlcCADYaAxeIBRtJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF8AcNhoDF4gEYUkVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCADYaAheIA9UoTFCwI0MxGRREMRhEgCMVH3x1AB1Db250cmFjdCBzdGF0aXN0aWNzIGF2YWlsYWJsZbAjQzEZFEQxGEQ2GgEXNhoCVwIAiAMsSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBVwIANhoCVwIAiAKqFihMULAjQzEZFEQxGEQ2GgEXNhoCVwIAiAJTSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBFzYaAheIAioWKExQsCNDMRkURDEYRIgCExYoTFCwI0MxGRREMRhENhoBF4gBt0kVFlcGAkxQKExQsCNDMRkURDEYRIgBmRYoTFCwI0MxGRREMRhEiAGDFihMULAjQzEZFEQxGEQ2GgFXAgA2GgIXNhoDVwIAiAEPFihMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAJ0WKExQsCNDMRkURDEYRIgAR0kVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCAIgAGUkVFlcGAkxQKExQsCNDMRlA/NAxGBREI0OKAQGAB0hlbGxvLCCL/1CJKSJnJwYiZycEImcqImcrImcnByJnJwgiZycJImcnCiJngCFDb250cmFjdCBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHmJigIBIicGZUQjCCcGSwFnSRaL/hUWVwYCi/5Qi/8VFlcGAov/UEsCgAIAFFBLAhWBFAgWVwYCUCcFUE8CUExQJxBPAlBJvEhMvyInCGVEIwgnCExniYoDASIpZUQjCClLAWdJFov9FRZXBgKL/VCL/haL/xUWVwYCi/9QSwOAAgAkUEsDFYEkCExPA1AnBVBMFlcGAlAnDFBPAlBMUCcLTwJQSbxITL+JIillRIkiJwZlRImKAQEiKWVEi/8PRIv/RIv/FicLTFC9RQFEIicHZUSB6AcIJwdMZ4AeRG9uYXRpb24gcmVjb3JkZWQgc3VjY2Vzc2Z1bGx5iSInB2VEiYoCAYv+i/8IiYoCAYv+QQAagBRWYWxpZCBkb25hdGlvbiBmcm9tIIv/UImAF0ludmFsaWQgZG9uYXRpb24gYW1vdW50iYoCASInBGVEIwgnBEsBZ0kWi/4VFlcGAov+UIv/FRZXBgKL/1BLAoACABZQSwIVgRYISRZXBgJPAkxQSwIVTwIIFlcGAlAnBVBPAlBMUIACAABQJw1PAlBJvEhMv4mKAgEiJwRlRIv+D0SL/kSL/hYnDUxQSb1FAURJvkQnDFwOi/8VFlcGAov/UEsBgQxZTwIiTwJYTFBLAbxIv4AcRGVsaXZlcnkgdmVyaWZpZWQgYnkgYWdlbnQ6IIv/UImKAgGxMgAyCkcDsiyyK7IqsikisiQisiOL/7IigAdWT1VDSEVSsiWL/rImgQOyELIBs7Q8IiplRCMIKksBZxZMFov+FRZXBgKL/lCL/xZLA0sDUIACACJQTFAnBVBMUCcOTwNQSbxITL+JigMBIoAAi/9EIkkqZUQjCCOLBIsDDIsCjAFBACCLBBYnDkxQSYwAvUUBQQBeiwC+RIEIW4v9EkEAUSOMAYsBRLGL/7ISi/6yFIv9shGBBLIQIrIBsyInCWVEi/8IJwlMZ4AlUmVhbCB0b2tlbnMgdHJhbnNmZXJyZWQgb24gYmxvY2tjaGFpbowAiYsEIwiMBEL/fYoDASIqZUSL/QxAAAWL/UAAFYASSW52YWxpZCB2b3VjaGVyIElEiYv/QAAjgCBBbW91bnQgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyb4mAFVZvdWNoZXJzIHJlZGVlbWVkIGF0IIv+UImKAwEiKWVEi/0PRIv9RIv9FicLSwFQvUUBRCIrZUQjCCtLAWdJFov+Fov/FRZXBgKL/1BLAk8FUE8CUIACACpQJwVQJwVQTFAnD08CUEm8SEy/iYoCASIrZUSL/g9Ei/5Ei/4WJw9MUEm9RQFESb5EJwxcGksBvEi/IicKZUQjCCcKTGeAIE1pbGVzdG9uZSBjb21wbGV0ZWQgd2l0aCBwcm9vZjogi/9QiYoDASIrZUSL/Q9Ei/1Ei/9EsTIAi/+yCIv+sgcjshCyAbOAKlJlYWwgYmxvY2tjaGFpbiBwYXltZW50IHNlbnQgZm9yIG1pbGVzdG9uZYmKAQEnC4v/UEm9RQFEvkSJigEBJxCL/1BJvUUBRL5EiYoBAScOi/9QSb1FAUS+RImKAQEnD4v/UEm9RQFEvkSJigEBJw2L/1BJvUUBRL5EiSIrZUSJIiplRIkiJwRlRIk=", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [2039, 2471], "errorMessage": "Amount must be greater than zero"}, {"pc": [2094], "errorMessage": "Asset not found in voucher registry"}, {"pc": [1602, 2298], "errorMessage": "Campaign ID cannot be zero"}, {"pc": [1599, 2295], "errorMessage": "Campaign ID out of range"}, {"pc": [1613, 2310, 2546], "errorMessage": "Campaign not found"}, {"pc": [1843], "errorMessage": "Delivery ID cannot be zero"}, {"pc": [1840], "errorMessage": "Delivery ID out of range"}, {"pc": [1855, 2610], "errorMessage": "Delivery not found"}, {"pc": [2381, 2468], "errorMessage": "Milestone ID cannot be zero"}, {"pc": [2378, 2465], "errorMessage": "Milestone ID out of range"}, {"pc": [2393, 2594], "errorMessage": "Milestone not found"}, {"pc": [508, 525, 542, 559, 578, 597, 616, 635, 654, 702, 740, 774, 805, 851, 889, 927, 953, 1000, 1034, 1063, 1097, 1122, 1139, 1167, 1184, 1201, 1234, 1263, 1287], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [2562], "errorMessage": "Organization not found"}, {"pc": [2578], "errorMessage": "Voucher not found"}, {"pc": [1322], "errorMessage": "can only call when creating"}, {"pc": [511, 528, 545, 562, 581, 600, 619, 638, 657, 705, 743, 777, 808, 854, 892, 930, 956, 1003, 1037, 1066, 1100, 1125, 1142, 1170, 1187, 1204, 1237, 1266, 1290], "errorMessage": "can only call when not creating"}, {"pc": [1501, 1581, 1595, 2291], "errorMessage": "check self.campaign_counter exists"}, {"pc": [2548], "errorMessage": "check self.campaigns entry exists"}, {"pc": [1858, 2612], "errorMessage": "check self.deliveries entry exists"}, {"pc": [1742, 1836, 2628], "errorMessage": "check self.delivery_counter exists"}, {"pc": [2314, 2374, 2461, 2617], "errorMessage": "check self.milestone_counter exists"}, {"pc": [2396, 2596], "errorMessage": "check self.milestones entry exists"}, {"pc": [1417, 1587], "errorMessage": "check self.organization_counter exists"}, {"pc": [2564], "errorMessage": "check self.organizations entry exists"}, {"pc": [1618, 1664], "errorMessage": "check self.total_donations exists"}, {"pc": [2410], "errorMessage": "check self.total_milestones_completed exists"}, {"pc": [1487], "errorMessage": "check self.total_organizations exists"}, {"pc": [2120], "errorMessage": "check self.total_vouchers_issued exists"}, {"pc": [1980, 2044, 2185, 2622], "errorMessage": "check self.voucher_counter exists"}, {"pc": [2079, 2580], "errorMessage": "check self.vouchers entry exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class CampaignInfo:
    """Struct for CampaignInfo"""
    id: int
    title: str
    target: int
    raised: int
    creator: str
    active: int

@dataclasses.dataclass(frozen=True)
class DeliveryRecord:
    """Struct for DeliveryRecord"""
    id: int
    recipient: str
    location: str
    agent: str
    verified: int

@dataclasses.dataclass(frozen=True)
class MilestoneInfo:
    """Struct for MilestoneInfo"""
    id: int
    campaign_id: int
    target_amount: int
    description: str
    completed: int
    funds_released: int

@dataclasses.dataclass(frozen=True)
class OrganizationInfo:
    """Struct for OrganizationInfo"""
    id: int
    name: str
    wallet_address: str
    verification_level: int

@dataclasses.dataclass(frozen=True)
class VoucherInfo:
    """Struct for VoucherInfo"""
    id: int
    asset_id: int
    name: str
    total_supply: int
    issued: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class HelloArgs:
    """Dataclass for hello arguments"""
    name: str

    @property
    def abi_method_signature(self) -> str:
        return "hello(string)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RegisterOrganizationArgs:
    """Dataclass for register_organization arguments"""
    org_name: str
    wallet_address: str

    @property
    def abi_method_signature(self) -> str:
        return "register_organization(string,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateCampaignArgs:
    """Dataclass for create_campaign arguments"""
    title: str
    target: int
    creator: str

    @property
    def abi_method_signature(self) -> str:
        return "create_campaign(string,uint64,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateDonationArgs:
    """Dataclass for create_donation arguments"""
    campaign_id: int

    @property
    def abi_method_signature(self) -> str:
        return "create_donation(uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CalculateTotalArgs:
    """Dataclass for calculate_total arguments"""
    amount1: int
    amount2: int

    @property
    def abi_method_signature(self) -> str:
        return "calculate_total(uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ValidateDonationArgs:
    """Dataclass for validate_donation arguments"""
    amount: int
    donor: str

    @property
    def abi_method_signature(self) -> str:
        return "validate_donation(uint64,string)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class LogDeliveryArgs:
    """Dataclass for log_delivery arguments"""
    recipient: str
    location: str

    @property
    def abi_method_signature(self) -> str:
        return "log_delivery(string,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VerifyDeliveryArgs:
    """Dataclass for verify_delivery arguments"""
    delivery_id: int
    agent: str

    @property
    def abi_method_signature(self) -> str:
        return "verify_delivery(uint64,string)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateVoucherAssetArgs:
    """Dataclass for create_voucher_asset arguments"""
    asset_name: str
    total_supply: int

    @property
    def abi_method_signature(self) -> str:
        return "create_voucher_asset(string,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DistributeVouchersArgs:
    """Dataclass for distribute_vouchers arguments"""
    asset_id: int
    recipient: str | bytes
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "distribute_vouchers(uint64,account,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RedeemVoucherArgs:
    """Dataclass for redeem_voucher arguments"""
    voucher_id: int
    merchant: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "redeem_voucher(uint64,string,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateMilestoneArgs:
    """Dataclass for create_milestone arguments"""
    campaign_id: int
    target_amount: int
    description: str

    @property
    def abi_method_signature(self) -> str:
        return "create_milestone(uint64,uint64,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CompleteMilestoneArgs:
    """Dataclass for complete_milestone arguments"""
    milestone_id: int
    proof: str

    @property
    def abi_method_signature(self) -> str:
        return "complete_milestone(uint64,string)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReleaseMilestoneFundsArgs:
    """Dataclass for release_milestone_funds arguments"""
    milestone_id: int
    recipient: str | bytes
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "release_milestone_funds(uint64,account,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetCampaignDetailsArgs:
    """Dataclass for get_campaign_details arguments"""
    campaign_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetOrganizationDetailsArgs:
    """Dataclass for get_organization_details arguments"""
    org_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_organization_details(uint64)(uint64,string,string,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetVoucherDetailsArgs:
    """Dataclass for get_voucher_details arguments"""
    voucher_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetMilestoneDetailsArgs:
    """Dataclass for get_milestone_details arguments"""
    milestone_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetDeliveryDetailsArgs:
    """Dataclass for get_delivery_details arguments"""
    delivery_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_delivery_details(uint64)(uint64,string,string,string,uint64)"


class AidchainContractsParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def hello(
        self,
        args: tuple[str] | HelloArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "hello(string)string",
            "args": method_args,
        }))

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }))

    def register_organization(
        self,
        args: tuple[str, str] | RegisterOrganizationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_organization(string,string)uint64",
            "args": method_args,
        }))

    def create_campaign(
        self,
        args: tuple[str, int, str] | CreateCampaignArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_campaign(string,uint64,string)uint64",
            "args": method_args,
        }))

    def get_campaign_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_campaign_count()uint64",
        }))

    def get_organization_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_organization_count()uint64",
        }))

    def create_donation(
        self,
        args: tuple[int] | CreateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_donation(uint64)string",
            "args": method_args,
        }))

    def get_total_donations(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_donations()uint64",
        }))

    def calculate_total(
        self,
        args: tuple[int, int] | CalculateTotalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_total(uint64,uint64)uint64",
            "args": method_args,
        }))

    def validate_donation(
        self,
        args: tuple[int, str] | ValidateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "validate_donation(uint64,string)string",
            "args": method_args,
        }))

    def log_delivery(
        self,
        args: tuple[str, str] | LogDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "log_delivery(string,string)uint64",
            "args": method_args,
        }))

    def verify_delivery(
        self,
        args: tuple[int, str] | VerifyDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "verify_delivery(uint64,string)string",
            "args": method_args,
        }))

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_contract_stats()string",
        }))

    def create_voucher_asset(
        self,
        args: tuple[str, int] | CreateVoucherAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_voucher_asset(string,uint64)uint64",
            "args": method_args,
        }))

    def distribute_vouchers(
        self,
        args: tuple[int, str | bytes, int] | DistributeVouchersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "distribute_vouchers(uint64,account,uint64)string",
            "args": method_args,
        }))

    def redeem_voucher(
        self,
        args: tuple[int, str, int] | RedeemVoucherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem_voucher(uint64,string,uint64)string",
            "args": method_args,
        }))

    def get_voucher_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_stats()string",
        }))

    def create_milestone(
        self,
        args: tuple[int, int, str] | CreateMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_milestone(uint64,uint64,string)uint64",
            "args": method_args,
        }))

    def complete_milestone(
        self,
        args: tuple[int, str] | CompleteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "complete_milestone(uint64,string)string",
            "args": method_args,
        }))

    def release_milestone_funds(
        self,
        args: tuple[int, str | bytes, int] | ReleaseMilestoneFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "release_milestone_funds(uint64,account,uint64)string",
            "args": method_args,
        }))

    def get_milestone_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_stats()string",
        }))

    def get_campaign_details(
        self,
        args: tuple[int] | GetCampaignDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)",
            "args": method_args,
        }))

    def get_organization_details(
        self,
        args: tuple[int] | GetOrganizationDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_organization_details(uint64)(uint64,string,string,uint64)",
            "args": method_args,
        }))

    def get_voucher_details(
        self,
        args: tuple[int] | GetVoucherDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)",
            "args": method_args,
        }))

    def get_milestone_details(
        self,
        args: tuple[int] | GetMilestoneDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)",
            "args": method_args,
        }))

    def get_delivery_details(
        self,
        args: tuple[int] | GetDeliveryDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_delivery_details(uint64)(uint64,string,string,string,uint64)",
            "args": method_args,
        }))

    def get_milestone_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_count()uint64",
        }))

    def get_voucher_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_count()uint64",
        }))

    def get_delivery_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_delivery_count()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class AidchainContractsCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def hello(
        self,
        args: tuple[str] | HelloArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "hello(string)string",
            "args": method_args,
        }))

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }))

    def register_organization(
        self,
        args: tuple[str, str] | RegisterOrganizationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_organization(string,string)uint64",
            "args": method_args,
        }))

    def create_campaign(
        self,
        args: tuple[str, int, str] | CreateCampaignArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_campaign(string,uint64,string)uint64",
            "args": method_args,
        }))

    def get_campaign_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_campaign_count()uint64",
        }))

    def get_organization_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_organization_count()uint64",
        }))

    def create_donation(
        self,
        args: tuple[int] | CreateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_donation(uint64)string",
            "args": method_args,
        }))

    def get_total_donations(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_donations()uint64",
        }))

    def calculate_total(
        self,
        args: tuple[int, int] | CalculateTotalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_total(uint64,uint64)uint64",
            "args": method_args,
        }))

    def validate_donation(
        self,
        args: tuple[int, str] | ValidateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "validate_donation(uint64,string)string",
            "args": method_args,
        }))

    def log_delivery(
        self,
        args: tuple[str, str] | LogDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "log_delivery(string,string)uint64",
            "args": method_args,
        }))

    def verify_delivery(
        self,
        args: tuple[int, str] | VerifyDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "verify_delivery(uint64,string)string",
            "args": method_args,
        }))

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_contract_stats()string",
        }))

    def create_voucher_asset(
        self,
        args: tuple[str, int] | CreateVoucherAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_voucher_asset(string,uint64)uint64",
            "args": method_args,
        }))

    def distribute_vouchers(
        self,
        args: tuple[int, str | bytes, int] | DistributeVouchersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "distribute_vouchers(uint64,account,uint64)string",
            "args": method_args,
        }))

    def redeem_voucher(
        self,
        args: tuple[int, str, int] | RedeemVoucherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem_voucher(uint64,string,uint64)string",
            "args": method_args,
        }))

    def get_voucher_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_stats()string",
        }))

    def create_milestone(
        self,
        args: tuple[int, int, str] | CreateMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_milestone(uint64,uint64,string)uint64",
            "args": method_args,
        }))

    def complete_milestone(
        self,
        args: tuple[int, str] | CompleteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "complete_milestone(uint64,string)string",
            "args": method_args,
        }))

    def release_milestone_funds(
        self,
        args: tuple[int, str | bytes, int] | ReleaseMilestoneFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "release_milestone_funds(uint64,account,uint64)string",
            "args": method_args,
        }))

    def get_milestone_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_stats()string",
        }))

    def get_campaign_details(
        self,
        args: tuple[int] | GetCampaignDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)",
            "args": method_args,
        }))

    def get_organization_details(
        self,
        args: tuple[int] | GetOrganizationDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_organization_details(uint64)(uint64,string,string,uint64)",
            "args": method_args,
        }))

    def get_voucher_details(
        self,
        args: tuple[int] | GetVoucherDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)",
            "args": method_args,
        }))

    def get_milestone_details(
        self,
        args: tuple[int] | GetMilestoneDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)",
            "args": method_args,
        }))

    def get_delivery_details(
        self,
        args: tuple[int] | GetDeliveryDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_delivery_details(uint64)(uint64,string,string,string,uint64)",
            "args": method_args,
        }))

    def get_milestone_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_count()uint64",
        }))

    def get_voucher_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_count()uint64",
        }))

    def get_delivery_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_delivery_count()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class AidchainContractsSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def hello(
        self,
        args: tuple[str] | HelloArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "hello(string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def register_organization(
        self,
        args: tuple[str, str] | RegisterOrganizationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "register_organization(string,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def create_campaign(
        self,
        args: tuple[str, int, str] | CreateCampaignArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_campaign(string,uint64,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_campaign_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_campaign_count()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_organization_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_organization_count()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def create_donation(
        self,
        args: tuple[int] | CreateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_donation(uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_total_donations(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_donations()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def calculate_total(
        self,
        args: tuple[int, int] | CalculateTotalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_total(uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def validate_donation(
        self,
        args: tuple[int, str] | ValidateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "validate_donation(uint64,string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def log_delivery(
        self,
        args: tuple[str, str] | LogDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "log_delivery(string,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def verify_delivery(
        self,
        args: tuple[int, str] | VerifyDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "verify_delivery(uint64,string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_contract_stats()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def create_voucher_asset(
        self,
        args: tuple[str, int] | CreateVoucherAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_voucher_asset(string,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def distribute_vouchers(
        self,
        args: tuple[int, str | bytes, int] | DistributeVouchersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "distribute_vouchers(uint64,account,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def redeem_voucher(
        self,
        args: tuple[int, str, int] | RedeemVoucherArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem_voucher(uint64,string,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_voucher_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_stats()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def create_milestone(
        self,
        args: tuple[int, int, str] | CreateMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_milestone(uint64,uint64,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def complete_milestone(
        self,
        args: tuple[int, str] | CompleteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "complete_milestone(uint64,string)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def release_milestone_funds(
        self,
        args: tuple[int, str | bytes, int] | ReleaseMilestoneFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "release_milestone_funds(uint64,account,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_milestone_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_stats()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_campaign_details(
        self,
        args: tuple[int] | GetCampaignDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[CampaignInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(CampaignInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[CampaignInfo], parsed_response)

    def get_organization_details(
        self,
        args: tuple[int] | GetOrganizationDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[OrganizationInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_organization_details(uint64)(uint64,string,string,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(OrganizationInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[OrganizationInfo], parsed_response)

    def get_voucher_details(
        self,
        args: tuple[int] | GetVoucherDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[VoucherInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(VoucherInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[VoucherInfo], parsed_response)

    def get_milestone_details(
        self,
        args: tuple[int] | GetMilestoneDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[MilestoneInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(MilestoneInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[MilestoneInfo], parsed_response)

    def get_delivery_details(
        self,
        args: tuple[int] | GetDeliveryDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[DeliveryRecord]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_delivery_details(uint64)(uint64,string,string,string,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(DeliveryRecord, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[DeliveryRecord], parsed_response)

    def get_milestone_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_milestone_count()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_voucher_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_voucher_count()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_delivery_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_delivery_count()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    campaign_counter: int
    organization_counter: int
    delivery_counter: int
    voucher_counter: int
    milestone_counter: int
    total_donations: int
    total_organizations: int
    total_vouchers_issued: int
    total_milestones_completed: int

class AidchainContractsState:
    """Methods to access state for the current AidchainContracts app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def campaign_counter(self) -> int:
        """Get the current value of the campaign_counter key in global_state state"""
        value = self.app_client.state.global_state.get_value("campaign_counter")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def organization_counter(self) -> int:
        """Get the current value of the organization_counter key in global_state state"""
        value = self.app_client.state.global_state.get_value("organization_counter")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def delivery_counter(self) -> int:
        """Get the current value of the delivery_counter key in global_state state"""
        value = self.app_client.state.global_state.get_value("delivery_counter")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voucher_counter(self) -> int:
        """Get the current value of the voucher_counter key in global_state state"""
        value = self.app_client.state.global_state.get_value("voucher_counter")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def milestone_counter(self) -> int:
        """Get the current value of the milestone_counter key in global_state state"""
        value = self.app_client.state.global_state.get_value("milestone_counter")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_donations(self) -> int:
        """Get the current value of the total_donations key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_donations")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_organizations(self) -> int:
        """Get the current value of the total_organizations key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_organizations")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_vouchers_issued(self) -> int:
        """Get the current value of the total_vouchers_issued key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_vouchers_issued")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_milestones_completed(self) -> int:
        """Get the current value of the total_milestones_completed key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_milestones_completed")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "CampaignInfo": CampaignInfo,
            "OrganizationInfo": OrganizationInfo,
            "MilestoneInfo": MilestoneInfo,
            "DeliveryRecord": DeliveryRecord,
            "VoucherInfo": VoucherInfo
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def campaigns(self) -> "_MapState[int, CampaignInfo]":
        """Get values from the campaigns map in box state"""
        return _MapState(
            self.app_client.state.box,
            "campaigns",
            self._struct_classes.get("CampaignInfo")
        )

    @property
    def organizations(self) -> "_MapState[int, OrganizationInfo]":
        """Get values from the organizations map in box state"""
        return _MapState(
            self.app_client.state.box,
            "organizations",
            self._struct_classes.get("OrganizationInfo")
        )

    @property
    def milestones(self) -> "_MapState[int, MilestoneInfo]":
        """Get values from the milestones map in box state"""
        return _MapState(
            self.app_client.state.box,
            "milestones",
            self._struct_classes.get("MilestoneInfo")
        )

    @property
    def deliveries(self) -> "_MapState[int, DeliveryRecord]":
        """Get values from the deliveries map in box state"""
        return _MapState(
            self.app_client.state.box,
            "deliveries",
            self._struct_classes.get("DeliveryRecord")
        )

    @property
    def vouchers(self) -> "_MapState[int, VoucherInfo]":
        """Get values from the vouchers map in box state"""
        return _MapState(
            self.app_client.state.box,
            "vouchers",
            self._struct_classes.get("VoucherInfo")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class AidchainContractsClient:
    """Client for interacting with AidchainContracts smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = AidchainContractsParams(self.app_client)
        self.create_transaction = AidchainContractsCreateTransactionParams(self.app_client)
        self.send = AidchainContractsSend(self.app_client)
        self.state = AidchainContractsState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "AidchainContractsClient":
        return AidchainContractsClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AidchainContractsClient":
        return AidchainContractsClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AidchainContractsClient":
        return AidchainContractsClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "AidchainContractsComposer":
        return AidchainContractsComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["hello(string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initialize()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["register_organization(string,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_campaign(string,uint64,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_campaign_count()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_organization_count()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_donation(uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_total_donations()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calculate_total(uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["validate_donation(uint64,string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["log_delivery(string,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["verify_delivery(uint64,string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_contract_stats()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_voucher_asset(string,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["distribute_vouchers(uint64,account,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["redeem_voucher(uint64,string,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_voucher_stats()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_milestone(uint64,uint64,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["complete_milestone(uint64,string)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["release_milestone_funds(uint64,account,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_milestone_stats()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> CampaignInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_organization_details(uint64)(uint64,string,string,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> OrganizationInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> VoucherInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> MilestoneInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_delivery_details(uint64)(uint64,string,string,string,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> DeliveryRecord | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_milestone_count()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_voucher_count()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_delivery_count()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | CampaignInfo | DeliveryRecord | MilestoneInfo | OrganizationInfo | VoucherInfo | int | str:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class AidchainContractsBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating AidchainContracts contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class AidchainContractsFactory(algokit_utils.TypedAppFactoryProtocol[AidchainContractsBareCallCreateParams, None, None]):
    """Factory for deploying and managing AidchainContractsClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = AidchainContractsFactoryParams(self.app_factory)
        self.create_transaction = AidchainContractsFactoryCreateTransaction(self.app_factory)
        self.send = AidchainContractsFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: AidchainContractsBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[AidchainContractsClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return AidchainContractsClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AidchainContractsClient:
        """Get an app client by creator address and name"""
        return AidchainContractsClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AidchainContractsClient:
        """Get an app client by app ID"""
        return AidchainContractsClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class AidchainContractsFactoryParams:
    """Parameters for creating transactions for AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AidchainContractsFactoryCreateParams(app_factory)
        self.update = AidchainContractsFactoryUpdateParams(app_factory)
        self.delete = AidchainContractsFactoryDeleteParams(app_factory)

class AidchainContractsFactoryCreateParams:
    """Parameters for 'create' operations of AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def hello(
        self,
        args: tuple[str] | HelloArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the hello(string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "hello(string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def initialize(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initialize()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initialize()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def register_organization(
        self,
        args: tuple[str, str] | RegisterOrganizationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the register_organization(string,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "register_organization(string,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_campaign(
        self,
        args: tuple[str, int, str] | CreateCampaignArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_campaign(string,uint64,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_campaign(string,uint64,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_campaign_count(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_campaign_count()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_campaign_count()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_organization_count(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_organization_count()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_organization_count()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_donation(
        self,
        args: tuple[int] | CreateDonationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_donation(uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_donation(uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_total_donations(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_total_donations()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_total_donations()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def calculate_total(
        self,
        args: tuple[int, int] | CalculateTotalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calculate_total(uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calculate_total(uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def validate_donation(
        self,
        args: tuple[int, str] | ValidateDonationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the validate_donation(uint64,string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "validate_donation(uint64,string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def log_delivery(
        self,
        args: tuple[str, str] | LogDeliveryArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the log_delivery(string,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "log_delivery(string,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def verify_delivery(
        self,
        args: tuple[int, str] | VerifyDeliveryArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the verify_delivery(uint64,string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "verify_delivery(uint64,string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_contract_stats(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_contract_stats()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_contract_stats()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_voucher_asset(
        self,
        args: tuple[str, int] | CreateVoucherAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_voucher_asset(string,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_voucher_asset(string,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def distribute_vouchers(
        self,
        args: tuple[int, str | bytes, int] | DistributeVouchersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the distribute_vouchers(uint64,account,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "distribute_vouchers(uint64,account,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def redeem_voucher(
        self,
        args: tuple[int, str, int] | RedeemVoucherArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the redeem_voucher(uint64,string,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "redeem_voucher(uint64,string,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_voucher_stats(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_voucher_stats()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_voucher_stats()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_milestone(
        self,
        args: tuple[int, int, str] | CreateMilestoneArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_milestone(uint64,uint64,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_milestone(uint64,uint64,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def complete_milestone(
        self,
        args: tuple[int, str] | CompleteMilestoneArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the complete_milestone(uint64,string)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "complete_milestone(uint64,string)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def release_milestone_funds(
        self,
        args: tuple[int, str | bytes, int] | ReleaseMilestoneFundsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the release_milestone_funds(uint64,account,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "release_milestone_funds(uint64,account,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_milestone_stats(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_milestone_stats()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_milestone_stats()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_campaign_details(
        self,
        args: tuple[int] | GetCampaignDetailsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_organization_details(
        self,
        args: tuple[int] | GetOrganizationDetailsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_organization_details(uint64)(uint64,string,string,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_organization_details(uint64)(uint64,string,string,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_voucher_details(
        self,
        args: tuple[int] | GetVoucherDetailsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_milestone_details(
        self,
        args: tuple[int] | GetMilestoneDetailsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_delivery_details(
        self,
        args: tuple[int] | GetDeliveryDetailsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_delivery_details(uint64)(uint64,string,string,string,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_delivery_details(uint64)(uint64,string,string,string,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_milestone_count(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_milestone_count()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_milestone_count()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_voucher_count(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_voucher_count()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_voucher_count()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_delivery_count(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_delivery_count()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_delivery_count()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class AidchainContractsFactoryUpdateParams:
    """Parameters for 'update' operations of AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class AidchainContractsFactoryDeleteParams:
    """Parameters for 'delete' operations of AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class AidchainContractsFactoryCreateTransaction:
    """Create transactions for AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AidchainContractsFactoryCreateTransactionCreate(app_factory)


class AidchainContractsFactoryCreateTransactionCreate:
    """Create new instances of AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class AidchainContractsFactorySend:
    """Send calls to AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AidchainContractsFactorySendCreate(app_factory)


class AidchainContractsFactorySendCreate:
    """Send create calls to AidchainContracts contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[AidchainContractsClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return AidchainContractsClient(result[0]), result[1]


class AidchainContractsComposer:
    """Composer for creating transaction groups for AidchainContracts contract calls"""

    def __init__(self, client: "AidchainContractsClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def hello(
        self,
        args: tuple[str] | HelloArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.hello(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "hello(string)string", v
            )
        )
        return self

    def initialize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.initialize(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initialize()string", v
            )
        )
        return self

    def register_organization(
        self,
        args: tuple[str, str] | RegisterOrganizationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.register_organization(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "register_organization(string,string)uint64", v
            )
        )
        return self

    def create_campaign(
        self,
        args: tuple[str, int, str] | CreateCampaignArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_campaign(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_campaign(string,uint64,string)uint64", v
            )
        )
        return self

    def get_campaign_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_campaign_count(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_campaign_count()uint64", v
            )
        )
        return self

    def get_organization_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_organization_count(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_organization_count()uint64", v
            )
        )
        return self

    def create_donation(
        self,
        args: tuple[int] | CreateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_donation(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_donation(uint64)string", v
            )
        )
        return self

    def get_total_donations(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_total_donations(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_total_donations()uint64", v
            )
        )
        return self

    def calculate_total(
        self,
        args: tuple[int, int] | CalculateTotalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calculate_total(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calculate_total(uint64,uint64)uint64", v
            )
        )
        return self

    def validate_donation(
        self,
        args: tuple[int, str] | ValidateDonationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.validate_donation(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "validate_donation(uint64,string)string", v
            )
        )
        return self

    def log_delivery(
        self,
        args: tuple[str, str] | LogDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.log_delivery(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "log_delivery(string,string)uint64", v
            )
        )
        return self

    def verify_delivery(
        self,
        args: tuple[int, str] | VerifyDeliveryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.verify_delivery(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "verify_delivery(uint64,string)string", v
            )
        )
        return self

    def get_contract_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_contract_stats(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_contract_stats()string", v
            )
        )
        return self

    def create_voucher_asset(
        self,
        args: tuple[str, int] | CreateVoucherAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_voucher_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_voucher_asset(string,uint64)uint64", v
            )
        )
        return self

    def distribute_vouchers(
        self,
        args: tuple[int, str | bytes, int] | DistributeVouchersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.distribute_vouchers(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "distribute_vouchers(uint64,account,uint64)string", v
            )
        )
        return self

    def redeem_voucher(
        self,
        args: tuple[int, str, int] | RedeemVoucherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.redeem_voucher(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "redeem_voucher(uint64,string,uint64)string", v
            )
        )
        return self

    def get_voucher_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_voucher_stats(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_voucher_stats()string", v
            )
        )
        return self

    def create_milestone(
        self,
        args: tuple[int, int, str] | CreateMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_milestone(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_milestone(uint64,uint64,string)uint64", v
            )
        )
        return self

    def complete_milestone(
        self,
        args: tuple[int, str] | CompleteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.complete_milestone(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "complete_milestone(uint64,string)string", v
            )
        )
        return self

    def release_milestone_funds(
        self,
        args: tuple[int, str | bytes, int] | ReleaseMilestoneFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.release_milestone_funds(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "release_milestone_funds(uint64,account,uint64)string", v
            )
        )
        return self

    def get_milestone_stats(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_milestone_stats(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_milestone_stats()string", v
            )
        )
        return self

    def get_campaign_details(
        self,
        args: tuple[int] | GetCampaignDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_campaign_details(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_campaign_details(uint64)(uint64,string,uint64,uint64,string,uint64)", v
            )
        )
        return self

    def get_organization_details(
        self,
        args: tuple[int] | GetOrganizationDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_organization_details(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_organization_details(uint64)(uint64,string,string,uint64)", v
            )
        )
        return self

    def get_voucher_details(
        self,
        args: tuple[int] | GetVoucherDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_voucher_details(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_voucher_details(uint64)(uint64,uint64,string,uint64,uint64)", v
            )
        )
        return self

    def get_milestone_details(
        self,
        args: tuple[int] | GetMilestoneDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_milestone_details(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_milestone_details(uint64)(uint64,uint64,uint64,string,uint64,uint64)", v
            )
        )
        return self

    def get_delivery_details(
        self,
        args: tuple[int] | GetDeliveryDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_delivery_details(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_delivery_details(uint64)(uint64,string,string,string,uint64)", v
            )
        )
        return self

    def get_milestone_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_milestone_count(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_milestone_count()uint64", v
            )
        )
        return self

    def get_voucher_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_voucher_count(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_voucher_count()uint64", v
            )
        )
        return self

    def get_delivery_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_delivery_count(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_delivery_count()uint64", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "AidchainContractsComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "AidchainContractsComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
